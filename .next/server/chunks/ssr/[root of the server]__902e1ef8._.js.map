{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/translations.ts"],"sourcesContent":["\nimport type { Language } from '@/types';\n\nexport type TranslationKeys = {\n  appName: string;\n  searchTitle: string;\n  searchPlaceholder: string;\n  searchButton: string;\n  languageLabel: string;\n  english: string;\n  hindi: string;\n  bengali: string;\n  resultsTitle: string;\n  noResults: string;\n  noResultsTitle: string;\n  drugNameLabel: string;\n  saltNameLabel: string;\n  drugCodeLabel: string;\n  drugCategoryLabel: string;\n  drugGroupLabel: string;\n  drugTypeLabel: string;\n  hsnCodeLabel: string;\n  searchKeyLabel: string;\n  mrpLabel: string;\n  uomLabel: string;\n  usageLabel: string;\n  manufacturerLabel: string;\n  dosageLabel: string;\n  sideEffectsLabel: string;\n  loadingAi: string;\n  loadingData: string;\n  loadingAiDetails: string;\n  errorOccurred: string;\n  errorAi: string;\n  errorData: string;\n  errorAiDetails: (itemName: string, source: string) => string;\n  searchWithAiResult: (correctedName: string) => string;\n  clearSearchButton: string;\n  sourceDbAiMessage: string;\n  sourceAiOnlyMessage: string;\n  sourceDbOnlyMessage: string;\n  sourceAiUnavailableForDetailsMessage: (medicineName: string) => string;\n  sourceAiFailedForDetailsMessage: (medicineName: string) => string;\n  initialHelperText: string;\n  allRightsReserved: string;\n  infoNotAvailable: string;\n  errorAiNotConfiguredOrModelTitle: string;\n  errorAiNotConfiguredOrModel: string;\n  errorAiNotConfiguredOrModelDetail: string;\n  errorAiFailedTitle: string;\n  errorAiFailed: string;\n  errorAiFailedDetail: string;\n  errorAiEnhancementSkipped: string;\n  errorAiModelNotFound: (modelName: string) => string;\n  aiCouldNotEnhance: (itemName: string) => string;\n  errorAiNotConfiguredOrModelForDetails: (itemName: string) => string;\n  errorAiFailedForDetails: (itemName: string) => string;\n  errorAiDetailsCritical: (itemName: string) => string;\n  copiedToClipboardTitle: string;\n  copiedToClipboardDescription: (fieldName: string, value: string) => string;\n  copyFailedTitle: string;\n  copyFailedDescription: string;\n};\n\nexport const translations: Record<Language, TranslationKeys> = {\n  en: {\n    appName: 'WellMeds',\n    searchTitle: 'Search for Medicines',\n    searchPlaceholder: 'Enter Drug Name, Salt, Drug Code, HSN Code...',\n    searchButton: 'Search',\n    languageLabel: 'Language',\n    english: 'English',\n    hindi: 'Hindi',\n    bengali: 'Bengali',\n    resultsTitle: 'Search Result',\n    noResults: 'No medicine found matching your query.',\n    noResultsTitle: 'No Specific Match Found',\n    drugNameLabel: 'Drug Name',\n    saltNameLabel: 'Salt Name (Composition)',\n    drugCodeLabel: 'Drug Code',\n    drugCategoryLabel: 'Category',\n    drugGroupLabel: 'Group',\n    drugTypeLabel: 'Type',\n    hsnCodeLabel: 'HSN Code',\n    searchKeyLabel: 'Search Key',\n    mrpLabel: 'MRP',\n    uomLabel: 'UOM',\n    usageLabel: 'Usage',\n    manufacturerLabel: 'Manufacturer',\n    dosageLabel: 'Dosage',\n    sideEffectsLabel: 'Side Effects',\n    loadingAi: 'Enhancing search with AI...',\n    loadingData: 'Searching database...',\n    loadingAiDetails: 'Generating details with AI...',\n    errorOccurred: 'An Error Occurred',\n    errorAi: 'AI search enhancement failed or was skipped. Using original query.',\n    errorData: 'Failed to fetch medicine data from database.',\n    errorAiDetails: (itemName: string, source: string) => `AI could not generate full details for \"${itemName}\". Status: ${source}. Displaying available data.`,\n    searchWithAiResult: (correctedName: string) => `AI suggested: \"${correctedName}\". Searching with this term.`,\n    clearSearchButton: 'Clear Search',\n    sourceDbAiMessage: 'Details from database, enhanced by AI.',\n    sourceAiOnlyMessage: 'Details primarily AI-generated.',\n    sourceDbOnlyMessage: 'Details from database.',\n    sourceAiUnavailableForDetailsMessage: (medicineName: string) => `AI features for enhancing \"${medicineName}\" details are unavailable due to API key or model issues.`,\n    sourceAiFailedForDetailsMessage: (medicineName: string) => `AI enhancement failed for \"${medicineName}\" details.`,\n    initialHelperText: 'Enter a drug name, salt name, drug code, HSN code, or search key to begin.',\n    allRightsReserved: 'All rights reserved.',\n    infoNotAvailable: \"Information not available.\",\n    errorAiNotConfiguredOrModelTitle: \"AI Key/Model Issue\",\n    errorAiNotConfiguredOrModel: \"AI-powered features are currently unavailable due to an issue with the AI configuration (API Key or Model).\",\n    errorAiNotConfiguredOrModelDetail: \"Please ensure the GEMINI_API_KEY is correctly set in your .env file, is valid, has billing enabled, and the specified AI model is accessible. Restart the server after changes.\",\n    errorAiFailedTitle: \"AI Processing Error\",\n    errorAiFailed: \"There was an error while trying to use AI. Some information may be missing or incomplete.\",\n    errorAiFailedDetail: \"Please check your server logs for more specific error details from the AI service. This could be due to network problems or other API issues.\",\n    errorAiEnhancementSkipped: \"AI search enhancement was skipped (possibly due to AI unavailability). Using your original query.\",\n    errorAiModelNotFound: (modelName: string) => `The AI model \"${modelName}\" was not found or is not accessible. Please check the model name and your API key permissions.`,\n    aiCouldNotEnhance: (itemName: string) => `AI could not provide further details for \"${itemName}\" beyond what was found in the database.`,\n    errorAiNotConfiguredOrModelForDetails: (itemName: string) => `AI features for generating details for \"${itemName}\" are unavailable due to API key or model configuration issues.`,\n    errorAiFailedForDetails: (itemName: string) => `AI failed to generate details for \"${itemName}\".`,\n    errorAiDetailsCritical: (itemName: string) => `A critical error occurred while trying to generate AI details for \"${itemName}\". Please check server logs.`,\n    copiedToClipboardTitle: \"Copied to Clipboard\",\n    copiedToClipboardDescription: (fieldName: string, value: string) => `${fieldName}: \"${value}\" copied.`,\n    copyFailedTitle: \"Copy Failed\",\n    copyFailedDescription: \"Could not copy text to clipboard. Please try again.\",\n  },\n  hi: {\n    appName: 'वेलमेड्स',\n    searchTitle: 'दवाएं खोजें',\n    searchPlaceholder: 'दवा का नाम, सॉल्ट, ड्रग कोड, HSN कोड दर्ज करें...',\n    searchButton: 'खोजें',\n    languageLabel: 'भाषा',\n    english: 'अंग्रेज़ी',\n    hindi: 'हिंदी',\n    bengali: 'বাংলা',\n    resultsTitle: 'खोज परिणाम',\n    noResults: 'आपकी क्वेरी से मेल खाने वाली कोई दवा नहीं मिली।',\n    noResultsTitle: 'कोई विशिष्ट मिलान नहीं मिला',\n    drugNameLabel: 'दवा का नाम',\n    saltNameLabel: 'सॉल्ट का नाम (संरचना)',\n    drugCodeLabel: 'ड्रग कोड',\n    drugCategoryLabel: 'श्रेणी',\n    drugGroupLabel: 'समूह',\n    drugTypeLabel: 'प्रकार',\n    hsnCodeLabel: 'एचएसएन कोड',\n    searchKeyLabel: 'खोज कुंजी',\n    mrpLabel: 'एमआरपी',\n    uomLabel: 'यूओएम',\n    usageLabel: 'उपयोग',\n    manufacturerLabel: 'निर्माता',\n    dosageLabel: 'खुराक',\n    sideEffectsLabel: 'दुष्प्रभाव',\n    loadingAi: 'एआई के साथ खोज को बढ़ाया जा रहा है...',\n    loadingData: 'डेटाबेस में खोजा जा रहा है...',\n    loadingAiDetails: 'एआई द्वारा विवरण तैयार किया जा रहा है...',\n    errorOccurred: 'एक त्रुटि हुई',\n    errorAi: 'एआई खोज वृद्धि विफल रही या छोड़ दी गई। मूल क्वेरी का उपयोग किया जा रहा है।',\n    errorData: 'डेटाबेस से दवा डेटा लाने में विफल।',\n    errorAiDetails: (itemName: string, source: string) => `एआई \"${itemName}\" के लिए पूर्ण विवरण उत्पन्न नहीं कर सका। स्थिति: ${source}। उपलब्ध डेटा प्रदर्शित किया जा रहा है।`,\n    searchWithAiResult: (correctedName: string) => `एआई ने सुझाया: \"${correctedName}\"। इस शब्द के साथ खोज रहे हैं।`,\n    clearSearchButton: 'खोज साफ़ करें',\n    sourceDbAiMessage: 'डेटाबेस से विवरण, एआई द्वारा संवर्धित।',\n    sourceAiOnlyMessage: 'विवरण मुख्य रूप से एआई-जनित।',\n    sourceDbOnlyMessage: 'डेटाबेस से विवरण।',\n    sourceAiUnavailableForDetailsMessage: (medicineName: string) => `\"${medicineName}\" विवरणों को बढ़ाने के लिए एआई सुविधाएँ एपीआई कुंजी या मॉडल समस्याओं के कारण अनुपलब्ध हैं।`,\n    sourceAiFailedForDetailsMessage: (medicineName: string) => `\"${medicineName}\" विवरणों के लिए एआई वृद्धि विफल रही।`,\n    initialHelperText: 'अपनी खोज शुरू करने के लिए दवा का नाम, सॉल्ट नाम, ड्रग कोड, HSN कोड, या खोज कुंजी दर्ज करें।',\n    allRightsReserved: 'सभी अधिकार सुरक्षित।',\n    infoNotAvailable: \"जानकारी उपलब्ध नहीं है।\",\n    errorAiNotConfiguredOrModelTitle: \"एआई कुंजी/मॉडल समस्या\",\n    errorAiNotConfiguredOrModel: \"एआई कॉन्फ़िगरेशन (एपीआई कुंजी या मॉडल) के साथ किसी समस्या के कारण एआई-संचालित सुविधाएँ वर्तमान में अनुपलब्ध हैं।\",\n    errorAiNotConfiguredOrModelDetail: \"कृपया सुनिश्चित करें कि GEMINI_API_KEY आपकी .env फ़ाइल में सही ढंग से सेट है, मान्य है, बिलिंग सक्षम है, और निर्दिष्ट एआई मॉडल पहुंच योग्य है। परिवर्तनों के बाद सर्वर को पुनरारंभ करें।\",\n    errorAiFailedTitle: \"एआई प्रसंस्करण त्रुटि\",\n    errorAiFailed: \"एआई का उपयोग करने का प्रयास करते समय एक त्रुटि हुई। कुछ जानकारी गुम या अधूरी हो सकती है।\",\n    errorAiFailedDetail: \"एआई सेवा से अधिक विशिष्ट त्रुटि विवरण के लिए कृपया अपने सर्वर लॉग की जांच करें। यह नेटवर्क समस्याओं या अन्य एपीआई समस्याओं के कारण हो सकता है।\",\n    errorAiEnhancementSkipped: \"एआई खोज वृद्धि छोड़ दी गई थी (संभवतः एआई अनुपलब्धता के कारण)। आपकी मूल क्वेरी का उपयोग किया जा रहा है।\",\n    errorAiModelNotFound: (modelName: string) => `एआई मॉडल \"${modelName}\" नहीं मिला या पहुंच योग्य नहीं है। कृपया मॉडल का नाम और अपनी एपीआई कुंजी अनुमतियों की जांच करें।`,\n    aiCouldNotEnhance: (itemName: string) => `एआई डेटाबेस में मिली जानकारी के अतिरिक्त \"${itemName}\" के लिए और विवरण प्रदान नहीं कर सका।`,\n    errorAiNotConfiguredOrModelForDetails: (itemName: string) => `एपीआई कुंजी या मॉडल कॉन्फ़िगरेशन समस्याओं के कारण \"${itemName}\" के लिए विवरण उत्पन्न करने के लिए एआई सुविधाएँ अनुपलब्ध हैं।`,\n    errorAiFailedForDetails: (itemName: string) => `एआई \"${itemName}\" के लिए विवरण उत्पन्न करने में विफल रहा।`,\n    errorAiDetailsCritical: (itemName: string) => `\"${itemName}\" के लिए एआई विवरण उत्पन्न करने का प्रयास करते समय एक गंभीर त्रुटि हुई। कृपया सर्वर लॉग जांचें।`,\n    copiedToClipboardTitle: \"क्लिपबोर्ड पर कॉपी किया गया\",\n    copiedToClipboardDescription: (fieldName: string, value: string) => `${fieldName}: \"${value}\" कॉपी किया गया।`,\n    copyFailedTitle: \"कॉपी विफल\",\n    copyFailedDescription: \"टेक्स्ट को क्लिपबोर्ड पर कॉपी नहीं किया जा सका। कृपया पुनः प्रयास करें।\",\n  },\n  bn: {\n    appName: 'ওয়েলমেডস',\n    searchTitle: 'ওষুধ অনুসন্ধান করুন',\n    searchPlaceholder: 'ওষুধের নাম, সল্ট, ড্রাগ কোড, HSN কোড লিখুন...',\n    searchButton: 'অনুসন্ধান',\n    languageLabel: 'ভাষা',\n    english: 'ইংরেজি',\n    hindi: 'হিন্দি',\n    bengali: 'বাংলা',\n    resultsTitle: 'অনুসন্ধানের ফলাফল',\n    noResults: 'আপনার প্রশ্নের সাথে মেলে এমন কোন ওষুধ পাওয়া যায়নি।',\n    noResultsTitle: 'কোন নির্দিষ্ট মিল পাওয়া যায়নি',\n    drugNameLabel: 'ওষুধের নাম',\n    saltNameLabel: 'সল্টের নাম (গঠন)',\n    drugCodeLabel: 'ড্রাগ কোড',\n    drugCategoryLabel: 'বিভাগ',\n    drugGroupLabel: 'গ্রুপ',\n    drugTypeLabel: 'প্রকার',\n    hsnCodeLabel: 'এইচএসএন কোড',\n    searchKeyLabel: 'সার্চ কী',\n    mrpLabel: 'এমআরপি',\n    uomLabel: 'ইউওএম',\n    usageLabel: 'ব্যবহার',\n    manufacturerLabel: 'প্রস্তুতকারক',\n    dosageLabel: 'মাত্রা',\n    sideEffectsLabel: 'পার্শ্ব প্রতিক্রিয়া',\n    loadingAi: 'এআই দিয়ে অনুসন্ধান উন্নত করা হচ্ছে...',\n    loadingData: 'ডাটাবেস অনুসন্ধান করা হচ্ছে...',\n    loadingAiDetails: 'এআই দ্বারা বিস্তারিত তৈরি করা হচ্ছে...',\n    errorOccurred: 'একটি ত্রুটি ঘটেছে',\n    errorAi: 'এআই অনুসন্ধান উন্নতি ব্যর্থ হয়েছে বা এড়িয়ে যাওয়া হয়েছে। মূল কোয়েরি ব্যবহার করা হচ্ছে।',\n    errorData: 'ডাটাবেস থেকে ওষুধের ডেটা আনতে ব্যর্থ হয়েছে।',\n    errorAiDetails: (itemName: string, source: string) => `এআই \"${itemName}\" এর জন্য সম্পূর্ণ বিবরণ তৈরি করতে পারেনি। স্থিতি: ${source}। উপলব্ধ ডেটা দেখানো হচ্ছে।`,\n    searchWithAiResult: (correctedName: string) => `এআই প্রস্তাবিত: \"${correctedName}\"। এই শব্দটি দিয়ে অনুসন্ধান করা হচ্ছে।`,\n    clearSearchButton: 'অনুসন্ধান সাফ করুন',\n    sourceDbAiMessage: 'ডাটাবেস থেকে বিস্তারিত, এআই দ্বারা উন্নত।',\n    sourceAiOnlyMessage: 'বিস্তারিত প্রধানত এআই-জেনারেটেড।',\n    sourceDbOnlyMessage: 'ডাটাবেস থেকে বিস্তারিত।',\n    sourceAiUnavailableForDetailsMessage: (medicineName: string) => `\"${medicineName}\" বিবরণ উন্নত করার জন্য এআই বৈশিষ্ট্যগুলি API কী বা মডেল সমস্যার কারণে অনুপলব্ধ।`,\n    sourceAiFailedForDetailsMessage: (medicineName: string) => `\"${medicineName}\" বিবরণের জন্য এআই উন্নতি ব্যর্থ হয়েছে।`,\n    initialHelperText: 'আপনার অনুসন্ধান শুরু করতে একটি ওষুধের নাম, সল্ট নাম, ড্রাগ কোড, HSN কোড, বা সার্চ কী লিখুন।',\n    allRightsReserved: 'সর্বস্বত্ব সংরক্ষিত।',\n    infoNotAvailable: \"তথ্য উপলব্ধ নেই।\",\n    errorAiNotConfiguredOrModelTitle: \"এআই কী/মডেল সমস্যা\",\n    errorAiNotConfiguredOrModel: \"এআই কনফিগারেশন (এপিআই কী বা মডেল) এর সাথে সমস্যার কারণে এআই-চালিত বৈশিষ্ট্যগুলি বর্তমানে অনুপলব্ধ।\",\n    errorAiNotConfiguredOrModelDetail: \"অনুগ্রহ করে নিশ্চিত করুন যে GEMINI_API_KEY আপনার .env ফাইলে সঠিকভাবে সেট করা আছে, বৈধ, বিলিং সক্ষম করা আছে এবং নির্দিষ্ট AI মডেলটি অ্যাক্সেসযোগ্য। পরিবর্তনের পরে সার্ভারটি পুনরায় চালু করুন।\",\n    errorAiFailedTitle: \"এআই প্রক্রিয়াকরণ ত্রুটি\",\n    errorAiFailed: \"এআই ব্যবহার করার চেষ্টা করার সময় একটি ত্রুটি ঘটেছে। কিছু তথ্য অনুপস্থিত বা অসম্পূর্ণ হতে পারে।\",\n    errorAiFailedDetail: \"এআই পরিষেবা থেকে আরও নির্দিষ্ট ত্রুটির বিবরণের জন্য অনুগ্রহ করে আপনার সার্ভার লগগুলি পরীক্ষা করুন। এটি নেটওয়ার্ক সমস্যা বা অন্যান্য API সমস্যার কারণে হতে পারে।\",\n    errorAiEnhancementSkipped: \"এআই অনুসন্ধান বৃদ্ধি এড়িয়ে যাওয়া হয়েছে (সম্ভবত এআই অনুপলব্ধতার কারণে)। আপনার আসল ক্যোয়ারী ব্যবহার করা হচ্ছে।\",\n    errorAiModelNotFound: (modelName: string) => `\"${modelName}\" এআই মডেলটি খুঁজে পাওয়া যায়নি বা অ্যাক্সেসযোগ্য নয়। অনুগ্রহ করে মডেলের নাম এবং আপনার API কী অনুমতিগুলি পরীক্ষা করুন।`,\n    aiCouldNotEnhance: (itemName: string) => `ডাটাবেসে যা পাওয়া গেছে তার বাইরে এআই \"${itemName}\" এর জন্য আর কোনো বিবরণ দিতে পারেনি।`,\n    errorAiNotConfiguredOrModelForDetails: (itemName: string) => `API কী বা মডেল কনফিগারেশন সমস্যার কারণে \"${itemName}\" এর জন্য বিবরণ তৈরি করার এআই বৈশিষ্ট্যগুলি অনুপলব্ধ।`,\n    errorAiFailedForDetails: (itemName: string) => `এআই \"${itemName}\" এর জন্য বিবরণ তৈরি করতে ব্যর্থ হয়েছে।`,\n    errorAiDetailsCritical: (itemName: string) => `\"${itemName}\" এর জন্য এআই বিবরণ তৈরি করার চেষ্টা করার সময় একটি গুরুতর ত্রুটি ঘটেছে। অনুগ্রহ করে সার্ভার লগ পরীক্ষা করুন।`,\n    copiedToClipboardTitle: \"ক্লিপবোর্ডে কপি করা হয়েছে\",\n    copiedToClipboardDescription: (fieldName: string, value: string) => `${fieldName}: \"${value}\" কপি করা হয়েছে।`,\n    copyFailedTitle: \"কপি ব্যর্থ হয়েছে\",\n    copyFailedDescription: \"ক্লিপবোর্ডে টেক্সট কপি করা যায়নি। অনুগ্রহ করে আবার চেষ্টা করুন।\",\n  },\n};\n\nexport const getTranslations = (lang: Language): TranslationKeys => translations[lang];\n\n    "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 200, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/enhance-medicine-search.ts"],"sourcesContent":["\n'use server';\n/**\n * @fileOverview Enhances medicine search functionality by extracting the intended medicine name from potentially misspelled, partial queries, barcodes, or composition keywords.\n *\n * - enhanceMedicineSearch - A function that takes a user's search query and returns a term suitable for backend search.\n * - EnhanceMedicineSearchInput - The input type for the enhanceMedicineSearch function.\n * - EnhanceMedicineSearchOutput - The return type for the enhanceMedicineSearch function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst EnhanceMedicineSearchInputSchema = z.object({\n  query: z.string().describe('The user input query, which may contain misspellings, be incomplete, a Drug Code, an HSN Code, or composition keywords, potentially including dosages.'),\n});\nexport type EnhanceMedicineSearchInput = z.infer<typeof EnhanceMedicineSearchInputSchema>;\n\nconst EnhanceMedicineSearchOutputSchema = z.object({\n  correctedMedicineName: z\n    .string()\n    .describe('The corrected/completed medicine name, Drug Code, HSN Code, or composition keyword extracted from the query, suitable for backend search. Should retain specific details like dosages if they appear to be part of a product name.'),\n  source: z.enum(['ai_enhanced', 'ai_unavailable', 'ai_failed', 'original_query_used']).optional().describe(\"Indicates the source or status of the correctedMedicineName. 'ai_enhanced' if AI successfully processed. 'ai_unavailable' if AI couldn't be used (e.g. no API key / model issue). 'ai_failed' if AI processing failed. 'original_query_used' if AI was skipped or failed and original query is returned.\"),\n});\nexport type EnhanceMedicineSearchOutput = z.infer<typeof EnhanceMedicineSearchOutputSchema>;\n\nexport async function enhanceMedicineSearch(input: EnhanceMedicineSearchInput): Promise<EnhanceMedicineSearchOutput> {\n  if (!input || typeof input.query !== 'string' || input.query.trim() === '') {\n    console.warn(`enhanceMedicineSearch: Invalid or empty input query. Input: ${JSON.stringify(input)}`);\n    return {\n      correctedMedicineName: input?.query || \"\", \n      source: 'original_query_used', \n    };\n  }\n\n  try {\n    const result = await enhanceMedicineSearchFlow(input);\n    console.log(\"enhanceMedicineSearch (wrapper) - Flow Result:\", JSON.stringify(result, null, 2));\n    if (result.source === 'ai_unavailable') {\n        console.warn(`enhanceMedicineSearch: Flow indicated AI is unavailable (model/key issue). Query: \"${input.query}\"`);\n    }\n    \n    if (!result.correctedMedicineName || result.correctedMedicineName.trim() === '') {\n        console.warn(`enhanceMedicineSearch: AI returned empty correctedMedicineName. Falling back to original query. Input: \"${input.query}\", AI Result: ${JSON.stringify(result)}`);\n        return { correctedMedicineName: input.query, source: 'original_query_used' };\n    }\n    return result;\n  } catch (error: unknown) {\n    let message = \"Unknown error during AI search enhancement.\";\n    let errorDetails = \"\";\n    if (error instanceof Error) {\n      message = error.message;\n      errorDetails = error.stack || String(error);\n    } else if (typeof error === 'string') {\n      message = error;\n      errorDetails = error;\n    } else if (error && typeof error === 'object' && 'message' in error) {\n      message = String((error as any).message);\n      errorDetails = JSON.stringify(error);\n    }\n    console.error(`Critical error in enhanceMedicineSearch wrapper for query \"${input.query}\":`, message, `Details: ${errorDetails}`, error);\n    return { correctedMedicineName: input.query, source: 'ai_failed' };\n  }\n}\n\nconst enhanceMedicineSearchPrompt = ai.definePrompt({\n  name: 'enhanceMedicineSearchPrompt',\n  model: 'googleai/gemini-1.5-flash-latest', // Updated model\n  input: {schema: EnhanceMedicineSearchInputSchema},\n  output: {schema: EnhanceMedicineSearchOutputSchema},\n  prompt: `You are an AI assistant for a medicine search application. Your primary goal is to help identify the medicine or code the user is looking for.\nThe user query can be a medicine name (possibly misspelled or partial, and may include dosages like \"500mg\"), its Drug Code (often numeric), an HSN Code (alphanumeric, e.g., 300490), or keywords from its salt composition.\nBased on the input, determine the most likely *medicine name*, *Drug Code*, *HSN Code*, or the *original query if it seems to be a direct identifier like a Drug Code, HSN Code, or a specific product formulation*.\nReturn this as \\`correctedMedicineName\\`.\nSet the 'source' field to 'ai_enhanced'.\n\nThe subsequent search will use this \\`correctedMedicineName\\` to look up medicines by name, Drug Code, HSN Code, or composition.\nIf the query includes dosage or strength (e.g., \"Paracetamol 500mg\", \"Dolo 650\"), and this appears to be part of a specific product name or common way of referring to it, RETAIN these details in \\`correctedMedicineName\\`.\nIf the query is a general description (e.g., \"medicine for headache\"), extract the key medicinal component.\nIf the query is a numeric string that looks like a Drug Code (e.g., \"01\", \"23\", \"100\"), return it as is.\nIf the query is an alphanumeric string that strongly resembles an HSN Code (e.g., \"300490\", \"30031010\"), return it as is.\n\nExamples:\n- Query: \"panadol\", correctedMedicineName: \"Panadol\", source: \"ai_enhanced\"\n- Query: \"amoxilin\", correctedMedicineName: \"Amoxicillin\", source: \"ai_enhanced\"\n- Query: \"dolo 650\", correctedMedicineName: \"Dolo 650\", source: \"ai_enhanced\"\n- Query: \"Paracetamol 500mg Tablet\", correctedMedicineName: \"Paracetamol 500mg Tablet\", source: \"ai_enhanced\"\n- Query: \"Aceclofenac 100 mg Paracetamol 325 mg\", correctedMedicineName: \"Aceclofenac 100 mg Paracetamol 325 mg\", source: \"ai_enhanced\"\n- Query: \"Drug Code 23 for Paracetamol\", correctedMedicineName: \"Paracetamol\", source: \"ai_enhanced\"\n- Query: \"23\" (assume this is a Drug Code), correctedMedicineName: \"23\", source: \"ai_enhanced\"\n- Query: \"300490\" (assume this is an HSN Code), correctedMedicineName: \"300490\", source: \"ai_enhanced\"\n- Query: \"HSN 300310 for Aspirin\", correctedMedicineName: \"Aspirin\", source: \"ai_enhanced\"\n- Query: \"syrup with paracetamol 500mg\" (descriptive), correctedMedicineName: \"Paracetamol\", source: \"ai_enhanced\"\n- Query: \"medicine for headache with ibuprofen\", correctedMedicineName: \"Ibuprofen\", source: \"ai_enhanced\"\n\nIf the input is a Drug Code or HSN Code, and you cannot confidently map it to a common medicine name, return the code itself.\nIf the input is a composition keyword (e.g. \"Paracetamol\"), return it or a slightly refined version.\nThe key is to provide a search term that will be effective for the backend, preserving specificity when it seems intentional.\nAlways set 'source' to 'ai_enhanced' in your direct response. Do not return empty strings for correctedMedicineName; if unsure, return the original query.\n\nUser Query: {{{query}}}\n  `,\n});\n\nconst enhanceMedicineSearchFlow = ai.defineFlow(\n  {\n    name: 'enhanceMedicineSearchFlow',\n    inputSchema: EnhanceMedicineSearchInputSchema,\n    outputSchema: EnhanceMedicineSearchOutputSchema,\n  },\n  async (input: EnhanceMedicineSearchInput): Promise<EnhanceMedicineSearchOutput> => {\n    let rawOutputFromAI: EnhanceMedicineSearchOutput | null = null;\n    try {\n      const {output} = await enhanceMedicineSearchPrompt(input);\n      rawOutputFromAI = output;\n      console.log(\"enhanceMedicineSearchFlow - Raw AI Output:\", JSON.stringify(rawOutputFromAI, null, 2));\n\n      if (!rawOutputFromAI ||\n          typeof rawOutputFromAI.correctedMedicineName !== 'string' ||\n          rawOutputFromAI.correctedMedicineName.trim() === '' || \n          (rawOutputFromAI.source && !['ai_enhanced', 'ai_unavailable', 'ai_failed', 'original_query_used'].includes(rawOutputFromAI.source)) \n        ) {\n        console.warn(\n            \"enhanceMedicineSearchFlow: AI returned invalid structure, empty correctedMedicineName, or invalid source. Input:\",\n            JSON.stringify(input, null, 2),\n            \"Raw Output:\",\n            JSON.stringify(rawOutputFromAI, null, 2)\n        );\n        return { correctedMedicineName: input.query, source: 'original_query_used' };\n      }\n      \n      return { \n        correctedMedicineName: rawOutputFromAI.correctedMedicineName,\n        source: rawOutputFromAI.source || 'ai_enhanced' \n      };\n\n    } catch (flowError: unknown) {\n      let errorMessage = \"AI model failed to process search enhancement or an unexpected error occurred.\";\n      let errorStack: string | undefined;\n\n      if (flowError instanceof Error) {\n          errorMessage = flowError.message;\n          errorStack = flowError.stack;\n\n          if (errorMessage.includes('API key not valid') || errorMessage.includes('User location is not supported') || errorMessage.includes('API_KEY_INVALID') || errorMessage.includes('API key is invalid') || errorMessage.includes('permission') || errorMessage.includes('denied')) {\n            console.error(`enhanceMedicineSearchFlow: Probable API key, permission, or configuration issue: ${errorMessage}`);\n            return { correctedMedicineName: input.query, source: 'ai_unavailable' };\n          }\n          if (errorMessage.includes('model not found') || errorMessage.includes('Could not find model') || errorMessage.includes('404 Not Found')) {\n            console.error(`enhanceMedicineSearchFlow: AI model not found or configured: ${errorMessage}`);\n            return { correctedMedicineName: input.query, source: 'ai_unavailable' };\n          }\n          if (errorMessage.includes('Billing account not found') || errorMessage.includes('billing issues')) {\n            console.error(`enhanceMedicineSearchFlow: Billing issue: ${errorMessage}`);\n            return { correctedMedicineName: input.query, source: 'ai_unavailable' };\n          }\n      } else if (typeof flowError === 'string') {\n          errorMessage = flowError;\n      } else if (flowError && typeof flowError === 'object' && 'message' in flowError) {\n          errorMessage = String((flowError as any).message);\n      }\n\n      console.error(`enhanceMedicineSearchFlow: Error for input ${JSON.stringify(input)} - Message: ${errorMessage}${errorStack ? `\\nStack: ${errorStack}` : ''}\\nRaw AI Output (if available): ${JSON.stringify(rawOutputFromAI, null, 2)}\\nOriginal Error Object:`, flowError);\n      return { correctedMedicineName: input.query, source: 'ai_failed' };\n    }\n  }\n);\n\n    "],"names":[],"mappings":";;;;;IA0BsB","debugId":null}},
    {"offset": {"line": 212, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/generate-medicine-details.ts"],"sourcesContent":["\n'use server';\n/**\n * @fileOverview Generates detailed medicine information using AI.\n * It can generate usage, manufacturer, dosage, and side effects,\n * supplementing existing database information (drugName, saltName, etc.).\n *\n * - generateMedicineDetails - Main exported function to call the flow.\n * - GenerateMedicineDetailsInput - Input type for the flow.\n * - GenerateMedicineDetailsOutput - Output type for the flow.\n */\n\nimport {ai} from '@/ai/genkit';\nimport type { Language } from '@/types';\nimport { getTranslations } from '@/lib/translations';\nimport {z} from 'genkit';\n\nconst GenerateMedicineDetailsInputSchema = z.object({\n  searchTermOrName: z.string().describe('The initial search term, or the drug name if found in the database.'),\n  language: z.enum(['en', 'hi', 'bn']).describe('The language for the generated details.'),\n  contextDrugCode: z.string().optional().describe('The drug code (Firebase key), if known from the database.'),\n  contextDrugName: z.string().optional().describe('The drug name, if already known from the database.'),\n  contextSaltName: z.string().optional().describe('The salt name (composition), if already known from the database. This is key for generating details.'),\n  contextDrugCategory: z.string().optional().describe('The drug category, if known from the database.'),\n  contextDrugGroup: z.string().optional().describe('The drug group, if known from the database.'),\n  contextDrugType: z.string().optional().describe('The drug type, if known from the database.'),\n  contextHsnCode: z.string().optional().describe('The HSN code, if known from the database.'),\n  contextSearchKey: z.string().optional().describe('The search key, if known from the database.'),\n});\nexport type GenerateMedicineDetailsInput = z.infer<typeof GenerateMedicineDetailsInputSchema>;\n\nconst GenerateMedicineDetailsOutputSchema = z.object({\n  drugCode: z.string().describe('The drug code (Firebase key).'),\n  drugName: z.string().describe('The common name of the medicine.'),\n  saltName: z.string().describe('The salt name/active ingredients of the medicine.'),\n  drugCategory: z.string().optional().describe('The drug category (from database if available).'),\n  drugGroup: z.string().optional().describe('The drug group (from database if available).'),\n  drugType: z.string().optional().describe('The drug type (from database if available).'),\n  hsnCode: z.string().optional().describe('The HSN code (from database if available).'),\n  searchKey: z.string().optional().describe('The search key (from database if available).'),\n  usage: z.string().describe(\"Typical usage or indications for the medicine. Each point MUST start with '• ' (a bullet character followed by a space) and be on its own new line. For example:\\n• For pain relief\\n• Reduces fever\"),\n  manufacturer: z.string().describe(\"List a few common manufacturers of the medicine, specifically in India. Each point MUST start with '• ' and be on its own new line. For example:\\n• Cipla\\n• Sun Pharma\"),\n  dosage: z.string().describe(\"General dosage guidelines for the medicine. Each distinct guideline MUST be a separate bullet point on a new line, starting with '• '. For example:\\n• Adults: 1 tablet\\n• Children: Half tablet\"),\n  sideEffects: z.string().describe(\"Common side effects associated with the medicine. Each point MUST start with '• ' (a bullet character followed by a space) and be on its own new line. For example:\\n• Nausea\\n• Headache\"),\n  source: z.enum(['database_ai_enhanced', 'ai_generated', 'database_only', 'ai_unavailable', 'ai_failed']).describe('Indicates if the primary details were from a database and enhanced by AI, or if all details were AI-generated, or if only database details are available due to AI failure/unavailability.'),\n});\nexport type GenerateMedicineDetailsOutput = z.infer<typeof GenerateMedicineDetailsOutputSchema>;\n\n\nexport async function generateMedicineDetails(input: GenerateMedicineDetailsInput): Promise<GenerateMedicineDetailsOutput> {\n  const languageToUse = input.language || 'en';\n  const t_fallback = getTranslations(languageToUse);\n  const defaultDrugCode = input.contextDrugCode || `ai-gen-${Date.now()}`;\n\n  if (!input || (typeof input.searchTermOrName !== 'string' || input.searchTermOrName.trim() === '') && (!input.contextDrugName || !input.contextSaltName)) {\n    console.warn(`[generateMedicineDetails wrapper] DETECTED INVALID OR EMPTY INPUT. Input: ${JSON.stringify(input)}`);\n    return {\n      drugCode: defaultDrugCode,\n      drugName: input?.contextDrugName || input?.searchTermOrName || t_fallback.infoNotAvailable,\n      saltName: input?.contextSaltName || t_fallback.infoNotAvailable,\n      drugCategory: input?.contextDrugCategory,\n      drugGroup: input?.contextDrugGroup,\n      drugType: input?.contextDrugType,\n      hsnCode: input?.contextHsnCode,\n      searchKey: input?.contextSearchKey,\n      usage: t_fallback.infoNotAvailable,\n      manufacturer: t_fallback.infoNotAvailable,\n      dosage: t_fallback.infoNotAvailable,\n      sideEffects: t_fallback.infoNotAvailable,\n      source: 'ai_failed',\n    };\n  }\n\n  const nameForFallback = input.contextDrugName || input.searchTermOrName || t_fallback.infoNotAvailable;\n  const saltNameForFallback = input.contextSaltName || t_fallback.infoNotAvailable;\n\n\n  try {\n    const result = await generateMedicineDetailsFlow(input);\n\n    if (result.source === 'ai_unavailable') {\n        console.warn(`[generateMedicineDetails wrapper] Flow indicated AI is unavailable (model/key issue). Input: ${JSON.stringify(input)}`);\n    }\n    \n    const validatedResult: GenerateMedicineDetailsOutput = {\n        drugCode: result.drugCode || defaultDrugCode,\n        drugName: result.drugName || nameForFallback,\n        saltName: result.saltName || saltNameForFallback,\n        drugCategory: result.drugCategory || input.contextDrugCategory,\n        drugGroup: result.drugGroup || input.contextDrugGroup,\n        drugType: result.drugType || input.contextDrugType,\n        hsnCode: result.hsnCode || input.contextHsnCode,\n        searchKey: result.searchKey || input.contextSearchKey,\n        usage: result.usage || t_fallback.infoNotAvailable,\n        manufacturer: result.manufacturer || t_fallback.infoNotAvailable,\n        dosage: result.dosage || t_fallback.infoNotAvailable,\n        sideEffects: result.sideEffects || t_fallback.infoNotAvailable,\n        source: result.source,\n    };\n    return validatedResult;\n\n  } catch (error: unknown) {\n    let rawErrorMessage = \"Unknown AI error during flow execution in wrapper.\";\n    let errorDetails = \"\";\n    if (error instanceof Error) {\n      rawErrorMessage = error.message;\n      errorDetails = error.stack || String(error);\n    } else if (typeof error === 'string') {\n      rawErrorMessage = error;\n      errorDetails = error;\n    } else if (error && typeof error === 'object' && 'message' in error) {\n      rawErrorMessage = String((error as any).message);\n      errorDetails = JSON.stringify(error);\n    }\n    console.error(`Critical error in generateMedicineDetails wrapper. Input: ${JSON.stringify(input)} Message: ${rawErrorMessage} Details: ${errorDetails}`, error);\n\n    const source: GenerateMedicineDetailsOutput['source'] = (input.contextDrugName && input.contextSaltName) ? 'database_only' : 'ai_failed';\n    const fallbackResult: GenerateMedicineDetailsOutput = {\n      drugCode: defaultDrugCode,\n      drugName: nameForFallback,\n      saltName: saltNameForFallback,\n      drugCategory: input.contextDrugCategory,\n      drugGroup: input.contextDrugGroup,\n      drugType: input.contextDrugType,\n      hsnCode: input.contextHsnCode,\n      searchKey: input.contextSearchKey,\n      usage: t_fallback.infoNotAvailable,\n      manufacturer: t_fallback.infoNotAvailable,\n      dosage: t_fallback.infoNotAvailable,\n      sideEffects: t_fallback.infoNotAvailable,\n      source: source,\n    };\n    return fallbackResult;\n  }\n}\n\nconst medicineDetailsPrompt = ai.definePrompt({\n  name: 'generateMedicineDetailsPrompt',\n  model: 'googleai/gemini-1.5-flash-latest',\n  input: {schema: GenerateMedicineDetailsInputSchema},\n  output: {schema: GenerateMedicineDetailsOutputSchema},\n  prompt: `You are a highly knowledgeable pharmaceutical AI assistant. Your goal is to provide AI-generated medicine details (usage, manufacturer, dosage, sideEffects) in the specified language: {{language}}.\nFormat all lists (usage, manufacturer, dosage, sideEffects) with each item on a NEW LINE, starting with '• ' (a bullet character followed by a space).\nThe fields drugCode, drugName, saltName, drugCategory, drugGroup, drugType, hsnCode, and searchKey MUST be taken directly from the provided context if available. DO NOT generate or alter these fields if context for them is provided.\n\n{{#if contextDrugName}}\nThe user has provided context for a medicine from the database:\nDrug Code: \"{{contextDrugCode}}\"\nDrug Name: \"{{contextDrugName}}\"\nSalt Name (Composition): \"{{contextSaltName}}\"\n{{#if contextDrugCategory}}Category: \"{{contextDrugCategory}}\"{{/if}}\n{{#if contextDrugGroup}}Group: \"{{contextDrugGroup}}\"{{/if}}\n{{#if contextDrugType}}Type: \"{{contextDrugType}}\"{{/if}}\n{{#if contextHsnCode}}HSN Code: \"{{contextHsnCode}}\"{{/if}}\n{{#if contextSearchKey}}Search Key: \"{{contextSearchKey}}\"{{/if}}\n\nYour primary task is to use the provided 'Salt Name (Composition): \"{{contextSaltName}}\"' to generate the following details for the medicine (identified as \"{{contextDrugName}}\") in {{language}}:\n- usage: Provide typical usage/indications.\n- manufacturer: List a few common INDIAN manufacturers.\n- dosage: Provide general dosage guidelines.\n- sideEffects: List common side effects.\n\nThe output 'source' field MUST be \"database_ai_enhanced\".\nThe output 'drugCode' MUST be \"{{contextDrugCode}}\".\nThe output 'drugName' MUST be \"{{contextDrugName}}\".\nThe output 'saltName' MUST be \"{{contextSaltName}}\".\n{{#if contextDrugCategory}}The output 'drugCategory' MUST be \"{{contextDrugCategory}}\".{{else}}The output 'drugCategory' field should be empty or omitted.{{/if}}\n{{#if contextDrugGroup}}The output 'drugGroup' MUST be \"{{contextDrugGroup}}\".{{else}}The output 'drugGroup' field should be empty or omitted.{{/if}}\n{{#if contextDrugType}}The output 'drugType' MUST be \"{{contextDrugType}}\".{{else}}The output 'drugType' field should be empty or omitted.{{/if}}\n{{#if contextHsnCode}}The output 'hsnCode' MUST be \"{{contextHsnCode}}\".{{else}}The output 'hsnCode' field should be empty or omitted.{{/if}}\n{{#if contextSearchKey}}The output 'searchKey' MUST be \"{{contextSearchKey}}\".{{else}}The output 'searchKey' field should be empty or omitted.{{/if}}\n\nIf you cannot find specific information for any of the AI-generated fields (usage, manufacturer, dosage, sideEffects), PROVIDE AN EMPTY STRING for that field. Do NOT use phrases like 'Information not available' or 'Not found' yourself in these fields.\n\nExample for contextDrugName=\"Paracetamol 500mg\", contextSaltName=\"Paracetamol 500mg\", language=\"en\", contextDrugCode=\"item001\":\n  drugCode: \"item001\"\n  drugName: \"Paracetamol 500mg\"\n  saltName: \"Paracetamol 500mg\"\n  drugCategory: \"Analgesic\" (example, taken from context if provided)\n  usage: \"• For relief from fever\\n• To reduce mild to moderate pain\"\n  manufacturer: \"• GSK India\\n• Cipla Ltd.\"\n  dosage: \"• Adults: 1 to 2 tablets every 4-6 hours\\n• Max: 8 tablets in 24 hours\"\n  sideEffects: \"• Nausea (rare)\\n• Allergic reactions (very rare)\"\n  source: \"database_ai_enhanced\"\n\n{{else}}\nThe user is searching for information related to: \"{{searchTermOrName}}\".\nThis term could be a medicine name, a partial name, or a salt name.\n\nFirst, try to identify the most likely specific 'drugName' and 'saltName' based on \"{{searchTermOrName}}\".\nThen, provide the following AI-generated details for that identified medicine in {{language}}:\n- usage\n- manufacturer\n- dosage\n- sideEffects\n\nThe output 'drugCode' should be a new unique identifier (e.g., starting with 'ai-gen-').\nThe output 'drugName' field should be the identified drug name.\nThe output 'saltName' field should be the identified salt name/composition.\nThe fields 'drugCategory', 'drugGroup', 'drugType', 'hsnCode', 'searchKey' MUST be empty or omitted as these are database-specific.\nThe output 'source' field MUST be \"ai_generated\".\nPROVIDE AN EMPTY STRING for any AI-generated detail field if information cannot be found. Do NOT use phrases like 'Information not available'.\n\nExample for searchTermOrName=\"Amoxicillin\", language=\"en\":\n  drugCode: \"ai-gen-{{timestamp}}\" // Or similar unique ID\n  drugName: \"Amoxicillin\"\n  saltName: \"Amoxicillin Trihydrate (e.g., 250mg or 500mg capsules)\"\n  usage: \"• Treats bacterial infections\\n• Used for ear, nose, throat infections\"\n  manufacturer: \"• Cipla Ltd.\\n• Mankind Pharma\"\n  dosage: \"• Adults: 250mg to 500mg every 8 hours\"\n  sideEffects: \"• Diarrhea\\n• Nausea\"\n  source: \"ai_generated\"\n  // drugCategory, drugGroup, drugType, hsnCode, searchKey must be empty or omitted.\n{{/if}}\n\nEnsure all textual output for AI-generated fields (usage, manufacturer, dosage, sideEffects) is in {{language}}.\nThe 'source' field must be one of: 'database_ai_enhanced', 'ai_generated', as specified above.\n`,\n});\n\nconst generateMedicineDetailsFlow = ai.defineFlow(\n  {\n    name: 'generateMedicineDetailsFlow',\n    inputSchema: GenerateMedicineDetailsInputSchema,\n    outputSchema: GenerateMedicineDetailsOutputSchema,\n  },\n  async (input: GenerateMedicineDetailsInput): Promise<GenerateMedicineDetailsOutput> => {\n    const t_flow_fallback = getTranslations(input.language || 'en');\n    const defaultDrugCode = input.contextDrugCode || `ai-gen-${Date.now()}`;\n\n    if (!process.env.GEMINI_API_KEY) {\n      console.error(\"CRITICAL ERROR: GEMINI_API_KEY is NOT SET in generateMedicineDetailsFlow environment!\");\n      return {\n        drugCode: defaultDrugCode,\n        drugName: input.contextDrugName || input.searchTermOrName || t_flow_fallback.infoNotAvailable,\n        saltName: input.contextSaltName || t_flow_fallback.infoNotAvailable,\n        drugCategory: input.contextDrugCategory,\n        drugGroup: input.contextDrugGroup,\n        drugType: input.contextDrugType,\n        hsnCode: input.contextHsnCode,\n        searchKey: input.contextSearchKey,\n        usage: t_flow_fallback.infoNotAvailable,\n        manufacturer: t_flow_fallback.infoNotAvailable,\n        dosage: t_flow_fallback.infoNotAvailable,\n        sideEffects: t_flow_fallback.infoNotAvailable,\n        source: 'ai_unavailable',\n      };\n    }\n\n    let rawOutputFromAI: GenerateMedicineDetailsOutput | null = null;\n\n    try {\n      const {output} = await medicineDetailsPrompt(input);\n      rawOutputFromAI = output;\n\n      if (!rawOutputFromAI || typeof rawOutputFromAI.drugName !== 'string' || typeof rawOutputFromAI.saltName !== 'string') {\n        console.warn(`[generateMedicineDetailsFlow] AI returned invalid basic structure. Input: ${JSON.stringify(input)}, Raw Output: ${JSON.stringify(rawOutputFromAI)}`);\n        const sourceForFailure: GenerateMedicineDetailsOutput['source'] = input.contextDrugName ? 'database_only' : 'ai_failed';\n        return {\n            drugCode: defaultDrugCode,\n            drugName: input.contextDrugName || input.searchTermOrName || t_flow_fallback.infoNotAvailable,\n            saltName: input.contextSaltName || t_flow_fallback.infoNotAvailable,\n            drugCategory: input.contextDrugCategory,\n            drugGroup: input.contextDrugGroup,\n            drugType: input.contextDrugType,\n            hsnCode: input.contextHsnCode,\n            searchKey: input.contextSearchKey,\n            usage: t_flow_fallback.infoNotAvailable,\n            manufacturer: t_flow_fallback.infoNotAvailable,\n            dosage: t_flow_fallback.infoNotAvailable,\n            sideEffects: t_flow_fallback.infoNotAvailable,\n            source: sourceForFailure,\n        };\n      }\n      \n      let finalSource: GenerateMedicineDetailsOutput['source'];\n      if (input.contextDrugName && input.contextSaltName) { // Database context path\n        finalSource = (rawOutputFromAI.source === 'database_ai_enhanced' && \n                       (rawOutputFromAI.usage?.trim() !== '' || rawOutputFromAI.manufacturer?.trim() !== '' || rawOutputFromAI.dosage?.trim() !== '' || rawOutputFromAI.sideEffects?.trim() !== ''))\n                      ? 'database_ai_enhanced' \n                      : 'database_only';\n      } else { // AI-only path\n        finalSource = (rawOutputFromAI.source === 'ai_generated' && rawOutputFromAI.drugName.trim() !== '' && rawOutputFromAI.saltName.trim() !== '')\n                      ? 'ai_generated'\n                      : 'ai_failed';\n      }\n      \n      // Ensure context fields are prioritized if they exist, even if AI tries to override them (which it shouldn't per prompt)\n      const validatedOutput: GenerateMedicineDetailsOutput = {\n        drugCode: rawOutputFromAI.drugCode || defaultDrugCode,\n        drugName: input.contextDrugName || rawOutputFromAI.drugName || t_flow_fallback.infoNotAvailable,\n        saltName: input.contextSaltName || rawOutputFromAI.saltName || t_flow_fallback.infoNotAvailable,\n        drugCategory: input.contextDrugCategory || rawOutputFromAI.drugCategory,\n        drugGroup: input.contextDrugGroup || rawOutputFromAI.drugGroup,\n        drugType: input.contextDrugType || rawOutputFromAI.drugType,\n        hsnCode: input.contextHsnCode || rawOutputFromAI.hsnCode,\n        searchKey: input.contextSearchKey || rawOutputFromAI.searchKey,\n        usage: rawOutputFromAI.usage?.trim() || t_flow_fallback.infoNotAvailable,\n        manufacturer: rawOutputFromAI.manufacturer?.trim() || t_flow_fallback.infoNotAvailable,\n        dosage: rawOutputFromAI.dosage?.trim() || t_flow_fallback.infoNotAvailable,\n        sideEffects: rawOutputFromAI.sideEffects?.trim() || t_flow_fallback.infoNotAvailable,\n        source: finalSource,\n      };\n      \n      // If it was supposed to be AI generated but essential AI fields are missing, mark as failed.\n      if (finalSource === 'ai_generated' && (validatedOutput.usage === t_flow_fallback.infoNotAvailable && validatedOutput.manufacturer === t_flow_fallback.infoNotAvailable)) {\n          console.warn(`[generateMedicineDetailsFlow] AI generated path but key AI fields are missing. Output: ${JSON.stringify(validatedOutput)}`);\n          validatedOutput.source = 'ai_failed';\n      }\n\n\n      return validatedOutput;\n\n    } catch (flowError: any) {\n        console.error(`[generateMedicineDetailsFlow] Error for input ${JSON.stringify(input)} - Message: ${flowError.message}`, flowError);\n        let sourceForError: GenerateMedicineDetailsOutput['source'] = (input.contextDrugName && input.contextSaltName) ? 'database_only' : 'ai_failed';\n        if (flowError.message?.toLowerCase().includes('api key') || flowError.message?.toLowerCase().includes('model not found')) {\n            sourceForError = 'ai_unavailable';\n        }\n        return {\n            drugCode: defaultDrugCode,\n            drugName: input.contextDrugName || input.searchTermOrName || t_flow_fallback.infoNotAvailable,\n            saltName: input.contextSaltName || t_flow_fallback.infoNotAvailable,\n            drugCategory: input.contextDrugCategory,\n            drugGroup: input.contextDrugGroup,\n            drugType: input.contextDrugType,\n            hsnCode: input.contextHsnCode,\n            searchKey: input.contextSearchKey,\n            usage: t_flow_fallback.infoNotAvailable,\n            manufacturer: t_flow_fallback.infoNotAvailable,\n            dosage: t_flow_fallback.infoNotAvailable,\n            sideEffects: t_flow_fallback.infoNotAvailable,\n            source: sourceForError,\n        };\n    }\n  }\n);\n\n"],"names":[],"mappings":";;;;;IAiDsB","debugId":null}},
    {"offset": {"line": 288, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/firebase.ts"],"sourcesContent":["\nimport { initializeApp, getApps, type FirebaseApp } from 'firebase/app';\nimport { getDatabase, type Database } from 'firebase/database';\nimport { getAuth, type Auth } from \"firebase/auth\";\n\n// Your web app's Firebase configuration\n// Ensure these environment variables are set in your .env.local file\nconst firebaseConfig = {\n  apiKey: process.env.NEXT_PUBLIC_FIREBASE_API_KEY,\n  authDomain: process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN,\n  projectId: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.NEXT_PUBLIC_FIREBASE_APP_ID,\n  databaseURL: process.env.NEXT_PUBLIC_FIREBASE_DATABASE_URL,\n};\n\nexport let app: FirebaseApp | undefined = undefined;\nexport let db: Database | undefined = undefined;\nexport let auth: Auth | undefined = undefined;\n\nlet initializationErrorDetails = \"\";\n\nconst requiredEnvVarKeys: (keyof typeof firebaseConfig)[] = [\n  'apiKey',\n  'authDomain',\n  'projectId',\n  'storageBucket',\n  'messagingSenderId',\n  'appId',\n  'databaseURL',\n];\n\nconst missingVars = requiredEnvVarKeys.filter(key => !firebaseConfig[key]);\n\nif (missingVars.length > 0) {\n  initializationErrorDetails =\n    '🔴 Firebase Initialization Error: The following required environment variables are missing or undefined:\\n' +\n    missingVars.map(key => {\n        const envVarName = `NEXT_PUBLIC_FIREBASE_${key.replace(/([A-Z])/g, '_$1').toUpperCase()}`;\n        return `- ${envVarName}`;\n    }).join('\\n') +\n    '\\n👉 Please ensure these are set in your .env.local file (especially NEXT_PUBLIC_FIREBASE_DATABASE_URL for Realtime Database) and the development server is restarted.' +\n    '\\nFirebase functionality will be impaired.';\n  console.error(initializationErrorDetails);\n}\n\nif (!initializationErrorDetails) {\n  try {\n    if (!getApps().length) {\n      app = initializeApp(firebaseConfig);\n    } else {\n      app = getApps()[0];\n    }\n\n    if (app) {\n      db = getDatabase(app);\n      auth = getAuth(app);\n    } else {\n      // This case should ideally not be reached if getApps().length check is robust\n      initializationErrorDetails = \"🔴 Firebase App object is undefined after initialization attempt. This is unexpected. Realtime Database and Auth cannot be initialized.\";\n      console.error(initializationErrorDetails);\n    }\n  } catch (e: any) {\n    initializationErrorDetails = `🔴 Firebase SDK Initialization Failed critically during app/db/auth setup: ${e.message || e}`;\n    console.error(initializationErrorDetails);\n    // Ensure these are undefined if an error occurs\n    app = undefined;\n    db = undefined;\n    auth = undefined;\n  }\n}\n\n// Post-initialization checks, only if no major error occurred before this stage\nif (!initializationErrorDetails) {\n  if (!db) {\n    console.error(\n      \"🔴 CRITICAL: Firebase Realtime Database instance (db) is UNDEFINED after Firebase App initialization.\\n\" +\n      \"   This usually means `getDatabase(app)` failed or an issue with the `databaseURL`.\\n\" +\n      \"   Realtime Database operations (reading/writing data) WILL FAIL. Check the following:\\n\" +\n      \"   1. Environment Variables: Ensure NEXT_PUBLIC_FIREBASE_DATABASE_URL in '.env.local' is correct and points to your Realtime Database, then restart the server.\\n\" +\n      \"   2. Realtime Database Setup: Verify that Realtime Database is created and enabled in your Firebase project (Firebase console -> Realtime Database).\\n\" +\n      \"   3. Security Rules: Your Realtime Database security rules (Firebase console -> Realtime Database -> Rules) might be blocking access. For initial development, you might use permissive rules like:\\n\" +\n      \"      {\\n\" +\n      \"        \\\"rules\\\": {\\n\" +\n      \"          \\\".read\\\": \\\"auth != null\\\", // Or true for public read\\n\" +\n      \"          \\\".write\\\": \\\"auth != null\\\" // Or true for public write\\n\" +\n      \"        }\\n\" +\n      \"      }\\n\" +\n      \"      IMPORTANT: Secure these rules properly before deploying to production!\\n\" +\n      \"   4. API Key Restrictions (Google Cloud Console -> APIs & Services -> Credentials):\\n\" +\n      \"      - Select your API key.\\n\" +\n      \"      - Under 'API restrictions', if 'Restrict key' is selected, ensure 'Firebase Realtime Database API' is in the list of allowed APIs.\\n\" +\n      \"      - Under 'Application restrictions', if 'HTTP referrers' is set, ensure your development URL (e.g., http://localhost:XXXX) is allowed.\"\n    );\n  }\n  if (!auth) {\n    console.error(\n      \"🔴 CRITICAL: Firebase Auth instance (auth) is UNDEFINED after Firebase App initialization.\\n\" +\n      \"   This usually means `getAuth(app)` failed.\\n\" +\n      \"   Authentication WILL FAIL. Check the following:\\n\" +\n      \"   1. Environment Variables: Ensure all NEXT_PUBLIC_FIREBASE_... auth-related variables in '.env.local' are correct and the server was restarted.\\n\" +\n      \"   2. Firebase Authentication Setup: Verify that Authentication (especially Email/Password sign-in provider if used) is enabled in the Firebase console (Firebase console -> Authentication -> Sign-in method).\\n\" +\n      \"   3. API Key Restrictions (Google Cloud Console -> APIs & Services -> Credentials):\\n\" +\n      \"      - Select your API key.\\n\" +\n      \"      - Ensure 'Identity Toolkit API' is in the list of allowed APIs if restrictions are applied.\"\n    );\n  }\n} else {\n    // If initializationErrorDetails is set, app/db/auth might be undefined.\n    // The primary error has already been logged.\n    // Adding a note that services might be unavailable due to the earlier error.\n    if (!app) console.warn(\"⚠️ Firebase App instance is undefined due to earlier initialization errors.\");\n    if (!db) console.warn(\"⚠️ Firebase Realtime Database (db) instance is undefined due to earlier initialization errors.\");\n    if (!auth) console.warn(\"⚠️ Firebase Auth (auth) instance is undefined due to earlier initialization errors.\");\n}\n"],"names":[],"mappings":";;;;;AACA;AAAA;AACA;AAAA;AACA;AAAA;;;;AAEA,wCAAwC;AACxC,qEAAqE;AACrE,MAAM,iBAAiB;IACrB,MAAM;IACN,UAAU;IACV,SAAS;IACT,aAAa;IACb,iBAAiB;IACjB,KAAK;IACL,WAAW;AACb;AAEO,IAAI,MAA+B;AACnC,IAAI,KAA2B;AAC/B,IAAI,OAAyB;AAEpC,IAAI,6BAA6B;AAEjC,MAAM,qBAAsD;IAC1D;IACA;IACA;IACA;IACA;IACA;IACA;CACD;AAED,MAAM,cAAc,mBAAmB,MAAM,CAAC,CAAA,MAAO,CAAC,cAAc,CAAC,IAAI;AAEzE,IAAI,YAAY,MAAM,GAAG,GAAG;IAC1B,6BACE,+GACA,YAAY,GAAG,CAAC,CAAA;QACZ,MAAM,aAAa,CAAC,qBAAqB,EAAE,IAAI,OAAO,CAAC,YAAY,OAAO,WAAW,IAAI;QACzF,OAAO,CAAC,EAAE,EAAE,YAAY;IAC5B,GAAG,IAAI,CAAC,QACR,2KACA;IACF,QAAQ,KAAK,CAAC;AAChB;AAEA,IAAI,CAAC,4BAA4B;IAC/B,IAAI;QACF,IAAI,CAAC,CAAA,GAAA,oLAAA,CAAA,UAAO,AAAD,IAAI,MAAM,EAAE;YACrB,MAAM,CAAA,GAAA,oLAAA,CAAA,gBAAa,AAAD,EAAE;QACtB,OAAO;YACL,MAAM,CAAA,GAAA,oLAAA,CAAA,UAAO,AAAD,GAAG,CAAC,EAAE;QACpB;QAEA,IAAI,KAAK;YACP,KAAK,CAAA,GAAA,qLAAA,CAAA,cAAW,AAAD,EAAE;YACjB,OAAO,CAAA,GAAA,yOAAA,CAAA,UAAO,AAAD,EAAE;QACjB,OAAO;YACL,8EAA8E;YAC9E,6BAA6B;YAC7B,QAAQ,KAAK,CAAC;QAChB;IACF,EAAE,OAAO,GAAQ;QACf,6BAA6B,CAAC,2EAA2E,EAAE,EAAE,OAAO,IAAI,GAAG;QAC3H,QAAQ,KAAK,CAAC;QACd,gDAAgD;QAChD,MAAM;QACN,KAAK;QACL,OAAO;IACT;AACF;AAEA,gFAAgF;AAChF,IAAI,CAAC,4BAA4B;IAC/B,IAAI,CAAC,IAAI;QACP,QAAQ,KAAK,CACX,4GACA,0FACA,6FACA,sKACA,4JACA,2MACA,cACA,2BACA,wEACA,yEACA,gBACA,cACA,mFACA,2FACA,mCACA,+IACA;IAEJ;IACA,IAAI,CAAC,MAAM;QACT,QAAQ,KAAK,CACX,iGACA,mDACA,wDACA,wJACA,sNACA,2FACA,mCACA;IAEJ;AACF,OAAO;IACH,wEAAwE;IACxE,6CAA6C;IAC7C,6EAA6E;IAC7E,IAAI,CAAC,KAAK,QAAQ,IAAI,CAAC;IACvB,IAAI,CAAC,IAAI,QAAQ,IAAI,CAAC;IACtB,IAAI,CAAC,MAAM,QAAQ,IAAI,CAAC;AAC5B","debugId":null}},
    {"offset": {"line": 380, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/mockApi.ts"],"sourcesContent":["\nimport type { Medicine } from '@/types';\nimport { db } from './firebase';\nimport { ref, get, child, query as dbQuery, orderByChild, equalTo, limitToFirst, startAt, endAt } from 'firebase/database';\n\ninterface DbMedicineData {\n  drugName: string;\n  saltName: string;\n  drugCategory?: string;\n  drugGroup?: string;\n  drugType?: string;\n  hsnCode?: string;\n  searchKey?: string;\n  mrp?: string;\n  uom?: string;\n  // lastUpdated is not explicitly part of Medicine type but exists in DB\n}\n\ninterface DbMedicineResult extends DbMedicineData {\n  drugCode: string; // This will be the Firebase key\n  foundInDb: true;\n}\n\n\nexport const fetchMedicineByName = async (\n  searchTerm: string\n): Promise<DbMedicineResult[]> => {\n  if (!db) {\n    console.warn(\"[mockApi] Firebase Realtime Database (db) is not initialized. Cannot fetch from DB.\");\n    return [];\n  }\n  if (!searchTerm || searchTerm.trim() === \"\") {\n    return [];\n  }\n\n  const normalizedSearchTerm = searchTerm.toLowerCase().trim();\n  const searchTermOriginalCase = searchTerm.trim(); // For exact HSN/Drug Code matching\n  const allMatches: DbMedicineResult[] = [];\n  const foundDrugCodes = new Set<string>();\n\n  // 1. Attempt to fetch by direct drugCode (Firebase key)\n  // Firebase keys are strings, but often numeric. Users might type \"01\" or \"1\".\n  // We'll try the original input as a key first.\n  try {\n    const directIdSnapshot = await get(child(medicinesRef, searchTermOriginalCase));\n    if (directIdSnapshot.exists()) {\n      const data = directIdSnapshot.val() as DbMedicineData;\n      if (data && data.drugName && data.saltName && !foundDrugCodes.has(searchTermOriginalCase)) {\n        allMatches.push({\n          drugCode: directIdSnapshot.key!,\n          ...data,\n          foundInDb: true,\n        });\n        foundDrugCodes.add(searchTermOriginalCase);\n        // If found by direct code, it's likely the most specific match, return immediately.\n        return allMatches;\n      }\n    }\n  } catch (e: any) {\n    console.error(`[mockApi] Error fetching medicine by direct drugCode '${searchTermOriginalCase}':`, e.message);\n  }\n\n\n  // 2. Full scan for HSN Code, Drug Name, Salt Name, Search Key\n  const medicinesRef = ref(db, 'medicines');\n  try {\n    const allMedicinesSnapshot = await get(medicinesRef);\n    if (allMedicinesSnapshot.exists()) {\n      const medicinesData = allMedicinesSnapshot.val();\n      const searchTermsParts = normalizedSearchTerm.split(/\\s+/).filter(part => part.length > 1);\n\n      for (const drugCodeKey in medicinesData) {\n        if (foundDrugCodes.has(drugCodeKey)) continue;\n\n        const medicine = medicinesData[drugCodeKey] as DbMedicineData;\n        if (!medicine || typeof medicine.drugName !== 'string' || typeof medicine.saltName !== 'string') {\n          continue;\n        }\n\n        const drugNameLower = medicine.drugName.toLowerCase();\n        const saltNameLower = medicine.saltName.toLowerCase();\n        const searchKeyLower = medicine.searchKey?.toLowerCase() || \"\";\n        const hsnCodeOriginal = medicine.hsnCode || \"\"; // Match HSN code case-sensitively or as stored\n\n        let match = false;\n\n        // Exact HSN Code match\n        if (hsnCodeOriginal && hsnCodeOriginal === searchTermOriginalCase) {\n          match = true;\n        }\n        // Exact Drug Code match (if not caught by key lookup, e.g., if key has non-numeric parts but user searches for it)\n        else if (drugCodeKey.toLowerCase() === normalizedSearchTerm) {\n            match = true;\n        }\n        // Substring matches for name, salt, searchKey\n        else if (drugNameLower.includes(normalizedSearchTerm) || saltNameLower.includes(normalizedSearchTerm) || searchKeyLower.includes(normalizedSearchTerm)) {\n          match = true;\n        }\n        // Multi-part search term match\n        else if (searchTermsParts.length > 0) {\n            const nameMatches = searchTermsParts.every(part => drugNameLower.includes(part));\n            const saltMatches = searchTermsParts.every(part => saltNameLower.includes(part));\n            const searchKeyMatches = searchTermsParts.every(part => searchKeyLower.includes(part));\n            if (nameMatches || saltMatches || searchKeyMatches) {\n                match = true;\n            }\n        }\n        \n        if (match) {\n          allMatches.push({\n            drugCode: drugCodeKey,\n            ...medicine,\n            foundInDb: true,\n          });\n          foundDrugCodes.add(drugCodeKey);\n        }\n      }\n    }\n  } catch (e: any) {\n      console.error(`[mockApi] Error during full scan for query (normalized term: '${normalizedSearchTerm}'):`, e.message);\n  }\n  \n  // Sort results for consistency, perhaps by drugName\n  allMatches.sort((a, b) => a.drugName.localeCompare(b.drugName));\n  \n  return allMatches;\n};\n\n\nexport const fetchSuggestions = async (query: string): Promise<string[]> => {\n  if (!db || query.trim().length < 2) {\n    return [];\n  }\n  const normalizedQuery = query.toLowerCase().trim();\n  const medicinesRef = ref(db, 'medicines');\n  const suggestions: string[] = [];\n  const addedSuggestions = new Set<string>();\n\n  try {\n    const snapshot = await get(medicinesRef);\n    if (snapshot.exists()) {\n      const medicinesData = snapshot.val();\n      for (const drugCodeKey in medicinesData) {\n        if (suggestions.length >= 7) break;\n\n        const medicine = medicinesData[drugCodeKey] as DbMedicineData;\n        if (medicine) {\n          // Suggest Drug Name\n          if (medicine.drugName && medicine.drugName.toLowerCase().includes(normalizedQuery) && !addedSuggestions.has(medicine.drugName)) {\n            suggestions.push(medicine.drugName);\n            addedSuggestions.add(medicine.drugName);\n          }\n          if (suggestions.length >= 7) break;\n          \n          // Suggest Salt Name\n          if (medicine.saltName && medicine.saltName.toLowerCase().includes(normalizedQuery) && !addedSuggestions.has(medicine.saltName)) {\n            suggestions.push(medicine.saltName);\n            addedSuggestions.add(medicine.saltName);\n          }\n          if (suggestions.length >= 7) break;\n\n          // Suggest Search Key\n          if (medicine.searchKey && medicine.searchKey.toLowerCase().includes(normalizedQuery) && !addedSuggestions.has(medicine.searchKey)) {\n             if (!addedSuggestions.has(medicine.drugName) && !addedSuggestions.has(medicine.saltName)) { // Avoid redundant suggestions if searchKey is same as name/salt\n                suggestions.push(medicine.searchKey);\n                addedSuggestions.add(medicine.searchKey);\n             }\n          }\n           if (suggestions.length >= 7) break;\n\n          // Suggest Drug Code (if query is numeric or starts with it)\n          if (drugCodeKey.toLowerCase().startsWith(normalizedQuery) && !addedSuggestions.has(drugCodeKey)) {\n            suggestions.push(drugCodeKey);\n            addedSuggestions.add(drugCodeKey);\n          }\n          if (suggestions.length >= 7) break;\n\n          // Suggest HSN Code (if query matches start of HSN)\n          if (medicine.hsnCode && medicine.hsnCode.toLowerCase().startsWith(normalizedQuery) && !addedSuggestions.has(medicine.hsnCode)) {\n            suggestions.push(medicine.hsnCode);\n            addedSuggestions.add(medicine.hsnCode);\n          }\n        }\n      }\n    }\n  } catch (error) {\n    console.error(\"[mockApi] Error fetching suggestions:\", error);\n  }\n  // Remove duplicates that might have been added if searchKey is same as drugName/saltName but was added separately\n  return Array.from(new Set(suggestions)).slice(0, 7);\n};\n\n    "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 534, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/button.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;AAEA;;;;;;AAEA,MAAM,iBAAiB,CAAA,GAAA,gKAAA,CAAA,MAAG,AAAD,EACvB,4VACA;IACE,UAAU;QACR,SAAS;YACP,SAAS;YACT,aACE;YACF,SACE;YACF,WACE;YACF,OAAO;YACP,MAAM;QACR;QACA,MAAM;YACJ,SAAS;YACT,IAAI;YACJ,IAAI;YACJ,MAAM;QACR;IACF;IACA,iBAAiB;QACf,SAAS;QACT,MAAM;IACR;AACF;AASF,MAAM,uBAAS,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAC5B,CAAC,EAAE,SAAS,EAAE,OAAO,EAAE,IAAI,EAAE,UAAU,KAAK,EAAE,GAAG,OAAO,EAAE;IACxD,MAAM,OAAO,UAAU,gKAAA,CAAA,OAAI,GAAG;IAC9B,qBACE,8OAAC;QACC,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,eAAe;YAAE;YAAS;YAAM;QAAU;QACxD,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;AAEF,OAAO,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 594, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/dropdown-menu.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 792, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/medisearch/LanguageSelector.tsx"],"sourcesContent":["\n\"use client\";\n\nimport type { Language } from \"@/types\";\nimport type { TranslationKeys } from \"@/lib/translations\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { Languages } from \"lucide-react\";\n\ninterface LanguageSelectorProps {\n  selectedLanguage: Language;\n  onLanguageChange: (lang: Language) => void;\n  t: TranslationKeys;\n}\n\nexport function LanguageSelector({\n  selectedLanguage,\n  onLanguageChange,\n  t,\n}: LanguageSelectorProps) {\n  const getCurrentLanguageName = (lang: Language, translations: TranslationKeys) => {\n    switch (lang) {\n      case \"en\":\n        return translations.english;\n      case \"hi\":\n        return translations.hindi;\n      case \"bn\":\n        return translations.bengali;\n      default:\n        return \"\";\n    }\n  };\n\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button \n          variant=\"ghost\" \n          className=\"text-foreground hover:bg-primary/10 hover:text-primary focus-visible:ring-ring\"\n        >\n          <Languages className=\"mr-2 h-5 w-5\" />\n          {getCurrentLanguageName(selectedLanguage, t)}\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent align=\"end\" className=\"bg-card border-border shadow-lg\">\n        <DropdownMenuItem\n          onSelect={() => onLanguageChange(\"en\")}\n          className=\"cursor-pointer hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground\"\n        >\n          {t.english}\n        </DropdownMenuItem>\n        <DropdownMenuItem\n          onSelect={() => onLanguageChange(\"hi\")}\n          className=\"cursor-pointer hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground\"\n        >\n          {t.hindi}\n        </DropdownMenuItem>\n        <DropdownMenuItem\n          onSelect={() => onLanguageChange(\"bn\")}\n          className=\"cursor-pointer hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground\"\n        >\n          {t.bengali}\n        </DropdownMenuItem>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n}\n\n"],"names":[],"mappings":";;;;AAKA;AACA;AAMA;AAXA;;;;;AAmBO,SAAS,iBAAiB,EAC/B,gBAAgB,EAChB,gBAAgB,EAChB,CAAC,EACqB;IACtB,MAAM,yBAAyB,CAAC,MAAgB;QAC9C,OAAQ;YACN,KAAK;gBACH,OAAO,aAAa,OAAO;YAC7B,KAAK;gBACH,OAAO,aAAa,KAAK;YAC3B,KAAK;gBACH,OAAO,aAAa,OAAO;YAC7B;gBACE,OAAO;QACX;IACF;IAEA,qBACE,8OAAC,4IAAA,CAAA,eAAY;;0BACX,8OAAC,4IAAA,CAAA,sBAAmB;gBAAC,OAAO;0BAC1B,cAAA,8OAAC,kIAAA,CAAA,SAAM;oBACL,SAAQ;oBACR,WAAU;;sCAEV,8OAAC,4MAAA,CAAA,YAAS;4BAAC,WAAU;;;;;;wBACpB,uBAAuB,kBAAkB;;;;;;;;;;;;0BAG9C,8OAAC,4IAAA,CAAA,sBAAmB;gBAAC,OAAM;gBAAM,WAAU;;kCACzC,8OAAC,4IAAA,CAAA,mBAAgB;wBACf,UAAU,IAAM,iBAAiB;wBACjC,WAAU;kCAET,EAAE,OAAO;;;;;;kCAEZ,8OAAC,4IAAA,CAAA,mBAAgB;wBACf,UAAU,IAAM,iBAAiB;wBACjC,WAAU;kCAET,EAAE,KAAK;;;;;;kCAEV,8OAAC,4IAAA,CAAA,mBAAgB;wBACf,UAAU,IAAM,iBAAiB;wBACjC,WAAU;kCAET,EAAE,OAAO;;;;;;;;;;;;;;;;;;AAKpB","debugId":null}},
    {"offset": {"line": 894, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/input.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n"],"names":[],"mappings":";;;;AAAA;AAEA;;;;AAEA,MAAM,sBAAQ,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAC3B,CAAC,EAAE,SAAS,EAAE,IAAI,EAAE,GAAG,OAAO,EAAE;IAC9B,qBACE,8OAAC;QACC,MAAM;QACN,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,kYACA;QAEF,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;AAEF,MAAM,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 923, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/medisearch/SuggestionsList.tsx"],"sourcesContent":["\"use client\";\n\nimport React from 'react';\n\ninterface SuggestionsListProps {\n  suggestions: string[];\n  onSuggestionClick: (suggestion: string) => void;\n}\n\nexport function SuggestionsList({ suggestions, onSuggestionClick }: SuggestionsListProps) {\n  if (suggestions.length === 0) {\n    return null;\n  }\n\n  return (\n    <ul \n        className=\"absolute left-0 right-0 mt-1 w-full bg-card border border-border rounded-md shadow-xl max-h-60 overflow-y-auto z-50\"\n        role=\"listbox\"\n    >\n      {suggestions.map((suggestion, index) => (\n        <li\n          key={index}\n          className=\"px-4 py-2 hover:bg-accent hover:text-accent-foreground cursor-pointer text-sm text-foreground\"\n          onClick={() => onSuggestionClick(suggestion)}\n          role=\"option\"\n          aria-selected=\"false\" // This could be enhanced with keyboard navigation\n        >\n          {suggestion}\n        </li>\n      ))}\n    </ul>\n  );\n}\n"],"names":[],"mappings":";;;;AAAA;;AASO,SAAS,gBAAgB,EAAE,WAAW,EAAE,iBAAiB,EAAwB;IACtF,IAAI,YAAY,MAAM,KAAK,GAAG;QAC5B,OAAO;IACT;IAEA,qBACE,8OAAC;QACG,WAAU;QACV,MAAK;kBAEN,YAAY,GAAG,CAAC,CAAC,YAAY,sBAC5B,8OAAC;gBAEC,WAAU;gBACV,SAAS,IAAM,kBAAkB;gBACjC,MAAK;gBACL,iBAAc,QAAQ,kDAAkD;;0BAEvE;eANI;;;;;;;;;;AAWf","debugId":null}},
    {"offset": {"line": 960, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/medisearch/SearchBar.tsx"],"sourcesContent":["\"use client\";\n\nimport React from \"react\";\nimport type { TranslationKeys } from \"@/lib/translations\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Search, Loader2 } from \"lucide-react\";\nimport { SuggestionsList } from \"./SuggestionsList\";\n\n\ninterface SearchBarProps {\n  searchQuery: string;\n  onSearchQueryChange: (query: string) => void;\n  onSubmit: (event: React.FormEvent<HTMLFormElement>) => void;\n  isLoading: boolean;\n  t: TranslationKeys;\n  suggestions: string[];\n  showSuggestions: boolean;\n  onSuggestionClick: (suggestion: string) => void;\n  onInputFocus: () => void;\n  onInputBlur: () => void;\n}\n\nexport function SearchBar({\n  searchQuery,\n  onSearchQueryChange,\n  onSubmit,\n  isLoading,\n  t,\n  suggestions,\n  showSuggestions,\n  onSuggestionClick,\n  onInputFocus,\n  onInputBlur,\n}: SearchBarProps) {\n  return (\n    <div className=\"relative w-full max-w-lg\">\n      <form onSubmit={onSubmit} className=\"flex w-full items-center space-x-2\">\n        <Input\n          type=\"text\"\n          value={searchQuery}\n          onChange={(e) => onSearchQueryChange(e.target.value)}\n          onFocus={onInputFocus}\n          onBlur={onInputBlur}\n          placeholder={t.searchPlaceholder}\n          className=\"flex-grow text-base\"\n          aria-label={t.searchPlaceholder}\n          disabled={isLoading}\n          autoComplete=\"off\" // Disable browser autocomplete to prefer our suggestions\n        />\n        <Button type=\"submit\" disabled={isLoading || !searchQuery.trim()} className=\"min-w-[100px]\">\n          {isLoading ? (\n            <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n          ) : (\n            <Search className=\"mr-2 h-4 w-4\" />\n          )}\n          {t.searchButton}\n        </Button>\n      </form>\n      {showSuggestions && suggestions.length > 0 && (\n        <SuggestionsList suggestions={suggestions} onSuggestionClick={onSuggestionClick} />\n      )}\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;AAIA;AACA;AACA;AAAA;AACA;AAPA;;;;;;AAuBO,SAAS,UAAU,EACxB,WAAW,EACX,mBAAmB,EACnB,QAAQ,EACR,SAAS,EACT,CAAC,EACD,WAAW,EACX,eAAe,EACf,iBAAiB,EACjB,YAAY,EACZ,WAAW,EACI;IACf,qBACE,8OAAC;QAAI,WAAU;;0BACb,8OAAC;gBAAK,UAAU;gBAAU,WAAU;;kCAClC,8OAAC,iIAAA,CAAA,QAAK;wBACJ,MAAK;wBACL,OAAO;wBACP,UAAU,CAAC,IAAM,oBAAoB,EAAE,MAAM,CAAC,KAAK;wBACnD,SAAS;wBACT,QAAQ;wBACR,aAAa,EAAE,iBAAiB;wBAChC,WAAU;wBACV,cAAY,EAAE,iBAAiB;wBAC/B,UAAU;wBACV,cAAa,MAAM,yDAAyD;;;;;;kCAE9E,8OAAC,kIAAA,CAAA,SAAM;wBAAC,MAAK;wBAAS,UAAU,aAAa,CAAC,YAAY,IAAI;wBAAI,WAAU;;4BACzE,0BACC,8OAAC,iNAAA,CAAA,UAAO;gCAAC,WAAU;;;;;qDAEnB,8OAAC,sMAAA,CAAA,SAAM;gCAAC,WAAU;;;;;;4BAEnB,EAAE,YAAY;;;;;;;;;;;;;YAGlB,mBAAmB,YAAY,MAAM,GAAG,mBACvC,8OAAC,mJAAA,CAAA,kBAAe;gBAAC,aAAa;gBAAa,mBAAmB;;;;;;;;;;;;AAItE","debugId":null}},
    {"offset": {"line": 1051, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/card.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n"],"names":[],"mappings":";;;;;;;;;AAAA;AAEA;;;;AAEA,MAAM,qBAAO,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG1B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,4DACA;QAED,GAAG,KAAK;;;;;;AAGb,KAAK,WAAW,GAAG;AAEnB,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG;AAEzB,MAAM,0BAAY,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,sDACA;QAED,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,gCAAkB,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGrC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,gBAAgB,WAAW,GAAG;AAE9B,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QAAI,KAAK;QAAK,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,YAAY;QAAa,GAAG,KAAK;;;;;;AAEhE,YAAY,WAAW,GAAG;AAE1B,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 1132, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/medisearch/MedicineCard.tsx"],"sourcesContent":["\n\"use client\";\n\nimport type { Medicine } from \"@/types\";\nimport type { TranslationKeys } from \"@/lib/translations\";\nimport { Button } from \"@/components/ui/button\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport {\n  Card,\n  CardContent,\n  CardHeader,\n  CardTitle,\n  CardDescription,\n  CardFooter,\n} from \"@/components/ui/card\";\nimport { Pill, Factory, AlertTriangle, ClipboardList, Stethoscope, Info, Hash, Tag, BookOpen, Type, PackageSearch, Fingerprint, IndianRupee, Box, Copy } from \"lucide-react\";\n\ninterface MedicineCardProps {\n  medicine: Medicine;\n  t: TranslationKeys;\n}\n\nexport function MedicineCard({ medicine, t }: MedicineCardProps) {\n  const { toast } = useToast();\n  const detailItemClass = \"text-sm font-medium text-foreground/80\";\n  const detailValueClass = \"text-base text-foreground\";\n  const multiLineDetailValueClass = `${detailValueClass} whitespace-pre-line`;\n\n  let sourceMessage = \"\";\n  switch (medicine.source) {\n    case 'database_ai_enhanced':\n      sourceMessage = t.sourceDbAiMessage;\n      break;\n    case 'ai_generated':\n      sourceMessage = t.sourceAiOnlyMessage;\n      break;\n    case 'database_only':\n      sourceMessage = t.sourceDbOnlyMessage;\n      break;\n    case 'ai_unavailable':\n      sourceMessage = t.sourceAiUnavailableForDetailsMessage(medicine.drugName);\n      break;\n    case 'ai_failed':\n      sourceMessage = t.sourceAiFailedForDetailsMessage(medicine.drugName);\n      break;\n    default:\n      if (medicine.drugName && medicine.saltName && medicine.usage === t.infoNotAvailable) {\n        sourceMessage = t.sourceDbOnlyMessage; // Fallback if source isn't explicitly set but seems like DB only\n      }\n  }\n  \n  const showDatabaseSpecificFields = medicine.source === 'database_ai_enhanced' || medicine.source === 'database_only';\n\n  const handleCopy = async (text: string | undefined, fieldName: string) => {\n    if (!text || text === t.infoNotAvailable) return;\n    try {\n      await navigator.clipboard.writeText(text);\n      toast({\n        title: t.copiedToClipboardTitle,\n        description: t.copiedToClipboardDescription(fieldName, text),\n      });\n    } catch (err) {\n      console.error(\"Failed to copy: \", err);\n      toast({\n        title: t.copyFailedTitle,\n        description: t.copyFailedDescription,\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  return (\n    <Card className=\"w-full max-w-lg shadow-lg transition-all duration-300 ease-in-out hover:shadow-xl\">\n      <CardHeader>\n        <CardTitle className=\"text-2xl font-semibold text-primary flex items-center mb-1\">\n          <Pill className=\"mr-2 h-7 w-7 flex-shrink-0\" />\n          <span className=\"break-words\">\n            {medicine.drugName}\n          </span>\n        </CardTitle>\n        <CardDescription className=\"text-sm text-muted-foreground\">\n          {t.resultsTitle}\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <div>\n          <div className=\"flex justify-between items-center mb-0.5\">\n            <h3 className={detailItemClass + \" flex items-center\"}>\n               <ClipboardList className=\"mr-2 h-4 w-4 text-primary\" /> {t.saltNameLabel}\n            </h3>\n            {medicine.saltName && medicine.saltName !== t.infoNotAvailable && (\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                className=\"h-7 w-7 text-muted-foreground hover:text-primary\"\n                onClick={() => handleCopy(medicine.saltName, t.saltNameLabel)}\n                aria-label={`Copy ${t.saltNameLabel}`}\n              >\n                <Copy className=\"h-4 w-4\" />\n              </Button>\n            )}\n          </div>\n          <p className={detailValueClass}>{medicine.saltName || t.infoNotAvailable}</p>\n        </div>\n\n        {showDatabaseSpecificFields && medicine.drugCode && !medicine.drugCode.startsWith('ai-gen-') && (\n          <div>\n            <div className=\"flex justify-between items-center mb-0.5\">\n              <h3 className={detailItemClass + \" flex items-center\"}>\n                <Fingerprint className=\"mr-2 h-4 w-4 text-primary\" /> {t.drugCodeLabel}\n              </h3>\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                className=\"h-7 w-7 text-muted-foreground hover:text-primary\"\n                onClick={() => handleCopy(medicine.drugCode, t.drugCodeLabel)}\n                aria-label={`Copy ${t.drugCodeLabel}`}\n              >\n                <Copy className=\"h-4 w-4\" />\n              </Button>\n            </div>\n            <p className={detailValueClass}>{medicine.drugCode}</p>\n          </div>\n        )}\n        \n        {showDatabaseSpecificFields && medicine.mrp && (\n          <div>\n            <h3 className={detailItemClass + \" flex items-center\"}>\n              <IndianRupee className=\"mr-2 h-4 w-4 text-primary\" /> {t.mrpLabel}\n            </h3>\n            <p className={detailValueClass}>{medicine.mrp}</p>\n          </div>\n        )}\n\n        {showDatabaseSpecificFields && medicine.uom && (\n          <div>\n            <h3 className={detailItemClass + \" flex items-center\"}>\n              <Box className=\"mr-2 h-4 w-4 text-primary\" /> {t.uomLabel}\n            </h3>\n            <p className={detailValueClass}>{medicine.uom}</p>\n          </div>\n        )}\n\n        {showDatabaseSpecificFields && medicine.drugCategory && (\n          <div>\n            <h3 className={detailItemClass + \" flex items-center\"}>\n              <Tag className=\"mr-2 h-4 w-4 text-primary\" /> {t.drugCategoryLabel}\n            </h3>\n            <p className={detailValueClass}>{medicine.drugCategory}</p>\n          </div>\n        )}\n\n        {showDatabaseSpecificFields && medicine.drugGroup && (\n          <div>\n            <h3 className={detailItemClass + \" flex items-center\"}>\n              <BookOpen className=\"mr-2 h-4 w-4 text-primary\" /> {t.drugGroupLabel}\n            </h3>\n            <p className={detailValueClass}>{medicine.drugGroup}</p>\n          </div>\n        )}\n        \n        {showDatabaseSpecificFields && medicine.drugType && (\n          <div>\n            <h3 className={detailItemClass + \" flex items-center\"}>\n              <Type className=\"mr-2 h-4 w-4 text-primary\" /> {t.drugTypeLabel}\n            </h3>\n            <p className={detailValueClass}>{medicine.drugType}</p>\n          </div>\n        )}\n\n        {showDatabaseSpecificFields && medicine.hsnCode && (\n          <div>\n             <div className=\"flex justify-between items-center mb-0.5\">\n              <h3 className={detailItemClass + \" flex items-center\"}>\n                <Hash className=\"mr-2 h-4 w-4 text-primary\" /> {t.hsnCodeLabel}\n              </h3>\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                className=\"h-7 w-7 text-muted-foreground hover:text-primary\"\n                onClick={() => handleCopy(medicine.hsnCode, t.hsnCodeLabel)}\n                aria-label={`Copy ${t.hsnCodeLabel}`}\n              >\n                <Copy className=\"h-4 w-4\" />\n              </Button>\n            </div>\n            <p className={detailValueClass}>{medicine.hsnCode}</p>\n          </div>\n        )}\n        \n        {showDatabaseSpecificFields && medicine.searchKey && (\n          <div>\n            <div className=\"flex justify-between items-center mb-0.5\">\n              <h3 className={detailItemClass + \" flex items-center\"}>\n                <PackageSearch className=\"mr-2 h-4 w-4 text-primary\" /> {t.searchKeyLabel}\n              </h3>\n               <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                className=\"h-7 w-7 text-muted-foreground hover:text-primary\"\n                onClick={() => handleCopy(medicine.searchKey, t.searchKeyLabel)}\n                aria-label={`Copy ${t.searchKeyLabel}`}\n              >\n                <Copy className=\"h-4 w-4\" />\n              </Button>\n            </div>\n            <p className={detailValueClass}>{medicine.searchKey}</p>\n          </div>\n        )}\n\n        <div>\n          <h3 className={detailItemClass + \" flex items-center\"}>\n            <Stethoscope className=\"mr-2 h-4 w-4 text-primary\" /> {t.usageLabel}\n          </h3>\n          <p className={multiLineDetailValueClass}>{medicine.usage || t.infoNotAvailable}</p>\n        </div>\n        <div>\n          <h3 className={detailItemClass + \" flex items-center\"}>\n            <Factory className=\"mr-2 h-4 w-4 text-primary\" /> {t.manufacturerLabel}\n          </h3>\n          <p className={multiLineDetailValueClass}>{medicine.manufacturer || t.infoNotAvailable}</p>\n        </div>\n        <div>\n          <h3 className={detailItemClass + \" flex items-center\"}>\n           <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"lucide lucide-syringe mr-2 text-primary\"><path d=\"m18 2 4 4\"/><path d=\"m17 7 3-3\"/><path d=\"M19 9 8.7 19.3c-1 1-2.5 1-3.4 0l-.6-.6c-1-1-1-2.5 0-3.4L15 5\"/><path d=\"m9 15 4-4\"/><path d=\"m5 19-3 3\"/><path d=\"m12 12 4.5 4.5\"/></svg>\n            {t.dosageLabel}\n          </h3>\n          <p className={multiLineDetailValueClass}>{medicine.dosage || t.infoNotAvailable}</p>\n        </div>\n        <div>\n          <h3 className={detailItemClass + \" flex items-center\"}>\n            <AlertTriangle className=\"mr-2 h-4 w-4 text-primary\" /> {t.sideEffectsLabel}\n          </h3>\n          <p className={multiLineDetailValueClass}>{medicine.sideEffects || t.infoNotAvailable}</p>\n        </div>\n        \n      </CardContent>\n      {sourceMessage && (\n        <CardFooter className=\"text-xs text-muted-foreground italic pt-4 border-t\">\n          <Info className=\"mr-2 h-3 w-3\" />\n          {sourceMessage}\n        </CardFooter>\n      )}\n    </Card>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1889, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/alert.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n"],"names":[],"mappings":";;;;;;AAAA;AACA;AAEA;;;;;AAEA,MAAM,gBAAgB,CAAA,GAAA,gKAAA,CAAA,MAAG,AAAD,EACtB,6JACA;IACE,UAAU;QACR,SAAS;YACP,SAAS;YACT,aACE;QACJ;IACF;IACA,iBAAiB;QACf,SAAS;IACX;AACF;AAGF,MAAM,sBAAQ,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG3B,CAAC,EAAE,SAAS,EAAE,OAAO,EAAE,GAAG,OAAO,EAAE,oBACnC,8OAAC;QACC,KAAK;QACL,MAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,cAAc;YAAE;QAAQ,IAAI;QACzC,GAAG,KAAK;;;;;;AAGb,MAAM,WAAW,GAAG;AAEpB,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,gDAAgD;QAC7D,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG;AAEzB,MAAM,iCAAmB,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGtC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,iBAAiB,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 1953, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/medisearch-app.tsx"],"sourcesContent":["\n\"use client\";\n\nimport React, { useState, useEffect, useCallback, useRef } from \"react\";\nimport Image from \"next/image\";\nimport type { Language, Medicine } from \"@/types\";\nimport { getTranslations, type TranslationKeys } from \"@/lib/translations\";\nimport { enhanceMedicineSearch, type EnhanceMedicineSearchOutput } from \"@/ai/flows/enhance-medicine-search\";\nimport { generateMedicineDetails } from \"@/ai/flows/generate-medicine-details\";\nimport { fetchMedicineByName, fetchSuggestions } from \"@/lib/mockApi\";\nimport { LanguageSelector } from \"@/components/medisearch/LanguageSelector\";\nimport { SearchBar } from \"@/components/medisearch/SearchBar\";\nimport { MedicineCard } from \"@/components/medisearch/MedicineCard\";\nimport { Alert, AlertDescription, AlertTitle } from \"@/components/ui/alert\";\nimport { Button } from \"@/components/ui/button\";\nimport { Loader2, AlertCircle, Info, RotateCcw, KeyRound, ServerCrash } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\n\nexport default function MediSearchApp() {\n  const [selectedLanguage, setSelectedLanguage] = useState<Language>(\"en\");\n  const [t, setT] = useState<TranslationKeys>(getTranslations(\"en\"));\n  const [searchQuery, setSearchQuery] = useState<string>(\"\");\n  const [searchResults, setSearchResults] = useState<Medicine[] | null>(null);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [error, setError] = useState<string | null>(null);\n  const [aiConfigError, setAiConfigError] = useState<string | null>(null);\n  const [aiConfigErrorType, setAiConfigErrorType] = useState<'key_or_model' | 'api_fail' | null>(null);\n  const [loadingMessage, setLoadingMessage] = useState<string>(\"\");\n  const [searchAttempted, setSearchAttempted] = useState<boolean>(false);\n\n  const [suggestions, setSuggestions] = useState<string[]>([]);\n  const [showSuggestions, setShowSuggestions] = useState<boolean>(false);\n  const debounceTimeoutRef = useRef<NodeJS.Timeout | null>(null);\n\n  const { toast } = useToast();\n\n  useEffect(() => {\n    setT(getTranslations(selectedLanguage));\n    document.documentElement.lang = selectedLanguage;\n  }, [selectedLanguage]);\n\n  const handleLanguageChange = useCallback((lang: Language) => {\n    setSelectedLanguage(lang);\n  }, []);\n\n  const handleClearSearch = useCallback(() => {\n    setSearchQuery(\"\");\n    setSearchResults(null);\n    setError(null);\n    setAiConfigError(null);\n    setAiConfigErrorType(null);\n    setSearchAttempted(false);\n    setSuggestions([]);\n    setShowSuggestions(false);\n  }, []);\n\n  const performSearchLogic = async (termToSearch: string) => {\n    if (!termToSearch.trim()) {\n      handleClearSearch();\n      return;\n    }\n\n    setIsLoading(true);\n    setError(null);\n    setAiConfigError(null);\n    setAiConfigErrorType(null);\n    setSearchResults(null);\n    setSearchAttempted(true);\n    setShowSuggestions(false);\n    let aiEnhancedSearchTerm = termToSearch.trim();\n    let aiEnhancementSource: EnhanceMedicineSearchOutput['source'] = 'original_query_used';\n\n\n    try {\n      setLoadingMessage(t.loadingAi);\n      const aiEnhanceResponse = await enhanceMedicineSearch({ query: termToSearch });\n      aiEnhancementSource = aiEnhanceResponse.source || 'ai_failed';\n\n      if (aiEnhanceResponse && aiEnhanceResponse.correctedMedicineName && aiEnhanceResponse.correctedMedicineName.trim() !== '') {\n        aiEnhancedSearchTerm = aiEnhanceResponse.correctedMedicineName.trim();\n        if (aiEnhanceResponse.source === 'ai_enhanced') {\n          toast({\n            title: t.appName,\n            description: t.searchWithAiResult(aiEnhancedSearchTerm),\n            action: <Info className=\"h-5 w-5 text-primary\" />,\n          });\n        } else if (aiEnhanceResponse.source === 'original_query_used') {\n           toast({ title: t.appName, description: t.errorAiEnhancementSkipped, variant: \"default\" });\n        } else if (aiEnhanceResponse.source === 'ai_unavailable') {\n            setAiConfigError(t.errorAiNotConfiguredOrModel);\n            setAiConfigErrorType('key_or_model');\n            toast({ title: t.appName, description: t.errorAiNotConfiguredOrModel, variant: \"destructive\" });\n        } else {\n           toast({ title: t.appName, description: t.errorAi, variant: \"destructive\" });\n           setAiConfigError(t.errorAiFailed);\n           setAiConfigErrorType('api_fail');\n        }\n      } else {\n        toast({ title: t.appName, description: t.errorAi, variant: \"destructive\" });\n        aiEnhancedSearchTerm = termToSearch.trim();\n        aiEnhancementSource = 'ai_failed';\n        setAiConfigError(t.errorAiFailed);\n        setAiConfigErrorType('api_fail');\n      }\n    } catch (aiError: any) {\n      let message = t.errorAi;\n      let toastVariant: \"default\" | \"destructive\" = \"destructive\";\n\n      console.error(`[MediSearchApp] AI enhancement critical failure. Query: \"${termToSearch}\"`);\n      console.error(`[MediSearchApp] Error Message: ${aiError?.message || 'No message'}`);\n      console.error(`[MediSearchApp] Error Stack: ${aiError?.stack || 'No stack'}`);\n      console.error(`[MediSearchApp] Full Error Object:`, aiError);\n\n\n      if (aiError?.message) {\n          if (aiError.message.includes('API key not valid') || aiError.message.includes('API_KEY_INVALID') || aiError.message.includes('User location is not supported') || aiError.message.includes('permission') || aiError.message.includes('denied') || aiError.message.includes('model not found') || aiError.message.includes('Could not find model') || aiError.message.includes('404 Not Found') || aiError.message.includes('gemini-1.5-flash-latest') || aiError.message.includes('gemini-pro') ) {\n              message = t.errorAiNotConfiguredOrModel;\n              setAiConfigError(t.errorAiNotConfiguredOrModel);\n              setAiConfigErrorType('key_or_model');\n          } else if (aiError.message.includes('server error') || aiError.message.includes('internal error') || aiError.message.includes('flow execution failed')) {\n              message = t.errorAiFailed;\n              setAiConfigError(t.errorAiFailed);\n              setAiConfigErrorType('api_fail');\n          } else {\n             message = `${t.errorAi} Details: ${aiError.message}`;\n             if (!aiConfigErrorType) {\n                setAiConfigError(message);\n                setAiConfigErrorType('api_fail');\n             }\n          }\n      } else {\n         if (!aiConfigErrorType) {\n            setAiConfigError(message);\n            setAiConfigErrorType('api_fail');\n         }\n      }\n\n      toast({\n        title: t.appName,\n        description: message,\n        variant: toastVariant,\n      });\n      aiEnhancedSearchTerm = termToSearch.trim();\n      aiEnhancementSource = 'ai_failed';\n    }\n\n    setLoadingMessage(t.loadingData);\n\n    try {\n      const dbDataArray = await fetchMedicineByName(aiEnhancedSearchTerm);\n      let processedMedicines: Medicine[] = [];\n\n      if (dbDataArray.length > 0) {\n        setLoadingMessage(t.loadingAiDetails);\n\n        processedMedicines = await Promise.all(\n          dbDataArray.map(async (dbItem) => {\n            try {\n                const aiDetails = await generateMedicineDetails({\n                  searchTermOrName: dbItem.drugName, // Use drugName for AI search context\n                  language: selectedLanguage,\n                  contextDrugCode: dbItem.drugCode,\n                  contextDrugName: dbItem.drugName,\n                  contextSaltName: dbItem.saltName,\n                  contextDrugCategory: dbItem.drugCategory,\n                  contextDrugGroup: dbItem.drugGroup,\n                  contextDrugType: dbItem.drugType,\n                  contextHsnCode: dbItem.hsnCode,\n                  contextSearchKey: dbItem.searchKey,\n                });\n\n                if (aiDetails.source === 'ai_failed' || aiDetails.source === 'ai_unavailable') {\n                    toast({\n                        title: t.appName,\n                        description: t.errorAiDetails(dbItem.drugName, aiDetails.source),\n                        variant: \"destructive\",\n                    });\n                     if (aiDetails.source === 'ai_unavailable' && !aiConfigError) {\n                        setAiConfigError(t.errorAiNotConfiguredOrModelForDetails(dbItem.drugName));\n                        setAiConfigErrorType('key_or_model');\n                    } else if (aiDetails.source === 'ai_failed' && !aiConfigError) {\n                        setAiConfigError(t.errorAiFailedForDetails(dbItem.drugName));\n                        setAiConfigErrorType('api_fail');\n                    }\n                } else if (aiDetails.source === 'database_only' && (aiDetails.usage === t.infoNotAvailable || aiDetails.manufacturer === t.infoNotAvailable)){\n                     toast({\n                        title: t.appName,\n                        description: t.aiCouldNotEnhance(dbItem.drugName),\n                        variant: \"default\",\n                    });\n                }\n                // Merging: AI details take precedence for AI-generated fields, context for DB fields\n                return {\n                  drugCode: aiDetails.drugCode || dbItem.drugCode, // Should be same if from DB\n                  drugName: aiDetails.drugName || dbItem.drugName, // Should be same\n                  saltName: aiDetails.saltName || dbItem.saltName, // Should be same\n                  drugCategory: dbItem.drugCategory || aiDetails.drugCategory,\n                  drugGroup: dbItem.drugGroup || aiDetails.drugGroup,\n                  drugType: dbItem.drugType || aiDetails.drugType,\n                  hsnCode: dbItem.hsnCode || aiDetails.hsnCode,\n                  searchKey: dbItem.searchKey || aiDetails.searchKey,\n                  usage: aiDetails.usage,\n                  manufacturer: aiDetails.manufacturer,\n                  dosage: aiDetails.dosage,\n                  sideEffects: aiDetails.sideEffects,\n                  source: aiDetails.source,\n                };\n            } catch (genDetailsError: any) {\n                console.error(`[MediSearchApp] Critical error during generateMedicineDetails promise for ${dbItem.drugName}:`, genDetailsError.message, genDetailsError.stack, genDetailsError);\n                 toast({\n                    title: t.appName,\n                    description: t.errorAiDetailsCritical(dbItem.drugName),\n                    variant: \"destructive\",\n                });\n                if (!aiConfigError) { \n                    if(genDetailsError?.message?.toLowerCase().includes('api key') || genDetailsError?.message?.toLowerCase().includes('model not found')) {\n                        setAiConfigError(t.errorAiNotConfiguredOrModelForDetails(dbItem.drugName));\n                        setAiConfigErrorType('key_or_model');\n                    } else {\n                        setAiConfigError(t.errorAiDetailsCritical(dbItem.drugName));\n                        setAiConfigErrorType('api_fail');\n                    }\n                }\n                return { // Fallback structure\n                    drugCode: dbItem.drugCode,\n                    drugName: dbItem.drugName,\n                    saltName: dbItem.saltName,\n                    drugCategory: dbItem.drugCategory,\n                    drugGroup: dbItem.drugGroup,\n                    drugType: dbItem.drugType,\n                    hsnCode: dbItem.hsnCode,\n                    searchKey: dbItem.searchKey,\n                    usage: t.infoNotAvailable,\n                    manufacturer: t.infoNotAvailable,\n                    dosage: t.infoNotAvailable,\n                    sideEffects: t.infoNotAvailable,\n                    source: 'ai_failed'\n                };\n            }\n          })\n        );\n      } else if (aiEnhancementSource === 'ai_enhanced' || aiEnhancementSource === 'original_query_used') {\n          setLoadingMessage(t.loadingAiDetails);\n          try {\n            const aiOnlyDetails = await generateMedicineDetails({\n                searchTermOrName: aiEnhancedSearchTerm,\n                language: selectedLanguage,\n            });\n             if (aiOnlyDetails.drugName && aiOnlyDetails.drugName !== t.infoNotAvailable && aiOnlyDetails.saltName !== t.infoNotAvailable ) {\n                 processedMedicines = [aiOnlyDetails]; // AI flow now returns the full Medicine structure\n             } else {\n                 processedMedicines = [];\n             }\n\n            if (aiOnlyDetails.source === 'ai_failed' || aiOnlyDetails.source === 'ai_unavailable') {\n                 toast({\n                    title: t.appName,\n                    description: t.errorAiDetails(aiEnhancedSearchTerm, aiOnlyDetails.source),\n                    variant: \"destructive\",\n                });\n                 if (aiOnlyDetails.source === 'ai_unavailable' && !aiConfigError) {\n                    setAiConfigError(t.errorAiNotConfiguredOrModelForDetails(aiEnhancedSearchTerm));\n                    setAiConfigErrorType('key_or_model');\n                } else if (aiOnlyDetails.source === 'ai_failed' && !aiConfigError) {\n                    setAiConfigError(t.errorAiFailedForDetails(aiEnhancedSearchTerm));\n                    setAiConfigErrorType('api_fail');\n                }\n            }\n          } catch (aiOnlyGenError: any) {\n            console.error(`[MediSearchApp] Critical error during AI-only generateMedicineDetails for \"${aiEnhancedSearchTerm}\":`, aiOnlyGenError.message, aiOnlyGenError.stack, aiOnlyGenError);\n             toast({\n                title: t.appName,\n                description: t.errorAiDetailsCritical(aiEnhancedSearchTerm),\n                variant: \"destructive\",\n            });\n            if (!aiConfigError) { \n                 if(aiOnlyGenError?.message?.toLowerCase().includes('api key') || aiOnlyGenError?.message?.toLowerCase().includes('model not found')) {\n                    setAiConfigError(t.errorAiNotConfiguredOrModelForDetails(aiEnhancedSearchTerm));\n                    setAiConfigErrorType('key_or_model');\n                 } else {\n                    setAiConfigError(t.errorAiDetailsCritical(aiEnhancedSearchTerm));\n                    setAiConfigErrorType('api_fail');\n                 }\n            }\n          }\n      }\n\n      setSearchResults(processedMedicines);\n\n      if (aiEnhancementSource === 'ai_unavailable' && !aiConfigError) {\n        setAiConfigError(t.errorAiNotConfiguredOrModel);\n        setAiConfigErrorType('key_or_model');\n      } else if (aiEnhancementSource === 'ai_failed' && !aiConfigError) {\n        setAiConfigError(t.errorAiFailed);\n        setAiConfigErrorType('api_fail');\n      }\n\n    } catch (dataProcessingError: any) {\n      let errorMessage = t.errorData;\n      if (dataProcessingError?.message) {\n        errorMessage = `${t.errorData} Details: ${dataProcessingError.message}`;\n      }\n      console.error(`[MediSearchApp] Data processing failed. Query: \"${aiEnhancedSearchTerm}\", Error: ${dataProcessingError.message || dataProcessingError}`, dataProcessingError);\n      setError(errorMessage);\n      toast({ title: t.appName, description: errorMessage, variant: \"destructive\" });\n    } finally {\n      setIsLoading(false);\n      setLoadingMessage(\"\");\n    }\n  };\n\n  const handleSearchSubmit = async (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    await performSearchLogic(searchQuery);\n  };\n\n  const handleSuggestionClick = async (suggestion: string) => {\n    setSearchQuery(suggestion);\n    setShowSuggestions(false);\n    await performSearchLogic(suggestion);\n  };\n\n  const handleSearchQueryChange = (query: string) => {\n    setSearchQuery(query);\n    if (debounceTimeoutRef.current) {\n      clearTimeout(debounceTimeoutRef.current);\n    }\n    if (query.length > 1) {\n      debounceTimeoutRef.current = setTimeout(async () => {\n        try {\n            const fetchedSuggestions = await fetchSuggestions(query);\n            setSuggestions(fetchedSuggestions);\n            setShowSuggestions(fetchedSuggestions.length > 0);\n        } catch (e) {\n            console.error(\"[MediSearchApp] Failed to fetch suggestions:\", e);\n            setSuggestions([]);\n            setShowSuggestions(false);\n        }\n      }, 300);\n    } else {\n      setSuggestions([]);\n      setShowSuggestions(false);\n    }\n  };\n\n  const handleInputFocus = () => {\n    if (searchQuery.length > 1 && suggestions.length > 0) {\n      setShowSuggestions(true);\n    }\n  };\n\n  const handleInputBlur = () => {\n    setTimeout(() => {\n      setShowSuggestions(false);\n    }, 150);\n  };\n\n\n  return (\n    <div className=\"flex flex-col items-center min-h-screen bg-background\">\n      <header className=\"w-full p-4 flex justify-end sticky top-0 z-50 bg-background/80 backdrop-blur-sm\">\n        <LanguageSelector\n          selectedLanguage={selectedLanguage}\n          onLanguageChange={handleLanguageChange}\n          t={t}\n        />\n      </header>\n\n      <main className=\"w-full flex flex-col items-center space-y-6 px-4 pb-8 pt-2 sm:pt-6\">\n        <div className=\"flex items-center justify-center mb-2\">\n             <Image\n                src=\"/images/logo_transparent.png\"\n                alt=\"WellMeds Logo\"\n                width={320}\n                height={320}\n                priority\n                className=\"object-contain\"\n                data-ai-hint=\"logo health\"\n            />\n        </div>\n\n        <section className=\"w-full max-w-lg p-6 bg-card rounded-xl shadow-2xl\">\n          <h2 className=\"text-2xl font-semibold text-center mb-6 text-foreground\">{t.searchTitle}</h2>\n          <SearchBar\n            searchQuery={searchQuery}\n            onSearchQueryChange={handleSearchQueryChange}\n            onSubmit={handleSearchSubmit}\n            isLoading={isLoading}\n            t={t}\n            suggestions={suggestions}\n            showSuggestions={showSuggestions}\n            onSuggestionClick={handleSuggestionClick}\n            onInputFocus={handleInputFocus}\n            onInputBlur={handleInputBlur}\n          />\n        </section>\n\n        {aiConfigError && !isLoading && (\n          <Alert variant=\"destructive\" className=\"w-full max-w-lg shadow-md\">\n            {aiConfigErrorType === 'key_or_model' ? <KeyRound className=\"h-5 w-5\" /> : <ServerCrash className=\"h-5 w-5\" />}\n            <AlertTitle>{aiConfigErrorType === 'key_or_model' ? t.errorAiNotConfiguredOrModelTitle : t.errorAiFailedTitle}</AlertTitle>\n            <AlertDescription>\n              {aiConfigError}\n              {aiConfigErrorType === 'key_or_model' && (\n                <p className=\"mt-2 text-xs\">\n                  {t.errorAiNotConfiguredOrModelDetail}\n                </p>\n              )}\n               {aiConfigErrorType === 'api_fail' && (\n                <p className=\"mt-2 text-xs\">\n                 {t.errorAiFailedDetail}\n                </p>\n              )}\n            </AlertDescription>\n          </Alert>\n        )}\n\n        {searchAttempted && !isLoading && (\n          <Button variant=\"outline\" onClick={handleClearSearch} className=\"self-center shadow-sm hover:shadow-md transition-shadow\">\n            <RotateCcw className=\"mr-2 h-4 w-4\" />\n            {t.clearSearchButton}\n          </Button>\n        )}\n\n        {isLoading && (\n          <div className=\"flex flex-col items-center space-y-2 p-4 text-foreground\">\n            <Loader2 className=\"h-8 w-8 animate-spin text-primary\" />\n            <p className=\"text-lg\">{loadingMessage || t.loadingData}</p>\n          </div>\n        )}\n\n        {error && !isLoading && (\n          <Alert variant=\"destructive\" className=\"w-full max-w-lg shadow-md\">\n            <AlertCircle className=\"h-5 w-5\" />\n            <AlertTitle>{t.errorOccurred}</AlertTitle>\n            <AlertDescription>{error}</AlertDescription>\n          </Alert>\n        )}\n\n        {!isLoading && !error && searchResults && searchResults.length > 0 && (\n          <section className=\"w-full mt-0 animate-fadeIn space-y-6 flex flex-col items-center\">\n            {searchResults.map(medicine => (\n              <MedicineCard key={medicine.drugCode} medicine={medicine} t={t} />\n            ))}\n          </section>\n        )}\n\n        {!isLoading && !error && searchResults && searchResults.length === 0 && searchAttempted && !aiConfigError && (\n            <Alert className=\"w-full max-w-lg shadow-md\">\n                <Info className=\"h-5 w-5\" />\n                <AlertTitle>{t.noResultsTitle}</AlertTitle>\n                <AlertDescription>{t.noResults}</AlertDescription>\n            </Alert>\n        )}\n\n\n        {!isLoading && !searchAttempted && !aiConfigError && (\n            <div className=\"text-center p-4 text-muted-foreground\">\n                {t.initialHelperText}\n            </div>\n        )}\n\n      </main>\n\n      <footer className=\"mt-auto pt-8 pb-4 text-center text-sm text-muted-foreground\">\n        <p>&copy; {new Date().getFullYear()} {t.appName}. {t.allRightsReserved}</p>\n      </footer>\n       <style jsx global>{`\n        .animate-fadeIn {\n          animation: fadeIn 0.5s ease-in-out;\n        }\n        @keyframes fadeIn {\n          from { opacity: 0; transform: translateY(10px); }\n          to { opacity: 1; transform: translateY(0); }\n        }\n      `}</style>\n    </div>\n  );\n}\n\n"],"names":[],"mappings":"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","debugId":null}}]
}